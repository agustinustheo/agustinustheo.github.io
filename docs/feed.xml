<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://agustinustheo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://agustinustheo.github.io/" rel="alternate" type="text/html" /><updated>2021-01-21T01:27:42+07:00</updated><id>https://agustinustheo.github.io/feed.xml</id><title type="html">Agustinus Theodorus</title><subtitle>I am primarily a web app developer. Most of my coding time is spent making new web apps, web APIs or bug fixing. My current hobby is writing, I usually spare time to write every month.</subtitle><author><name>Agustinus Theodorus</name></author><entry><title type="html">How to Deploy Flutter Web to Netlify Using CI/CD and Azure Pipelines</title><link href="https://agustinustheo.github.io/tech/2021/01/20/how-to-deploy-flutter-web-to-netlify-using-ci-cd-and-azure-pipelines.html" rel="alternate" type="text/html" title="How to Deploy Flutter Web to Netlify Using CI/CD and Azure Pipelines" /><published>2021-01-20T21:44:42+07:00</published><updated>2021-01-20T21:44:42+07:00</updated><id>https://agustinustheo.github.io/tech/2021/01/20/how-to-deploy-flutter-web-to-netlify-using-ci-cd-and-azure-pipelines</id><content type="html" xml:base="https://agustinustheo.github.io/tech/2021/01/20/how-to-deploy-flutter-web-to-netlify-using-ci-cd-and-azure-pipelines.html">&lt;p&gt;Developing web apps has become easier over the years. With Flutter it became very easy and fun. But to be honest, deploying it is sometimes a pain. Most services are not ready for Flutter projects being hosted on the web. Sure, &lt;strong&gt;&lt;em&gt;some are&lt;/em&gt;&lt;/strong&gt; but it needs a bit of tinkering.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*Zuxm0Houm1FyBdTE&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don’t mind tinkering a bit, I mean… Why not?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here in this tutorial, I am going to share with you how to implement CI/CD on your Flutter web deployments using Azure DevOps Pipelines. And best of all, we are going to use Netlify! Why do I sound excited? Because honestly, Netlify is very easy to use. Now, without further ado let’s get to it.&lt;/p&gt;

&lt;h3 id=&quot;installing-dependencies&quot;&gt;Installing Dependencies&lt;/h3&gt;

&lt;p&gt;Before we start, we need to install the required dependencies beforehand.&lt;/p&gt;

&lt;h4 id=&quot;1-installing-the-flutterplugin&quot;&gt;1. Installing the Flutter plugin&lt;/h4&gt;

&lt;p&gt;Well, you can use the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=aloisdeniel.flutter&quot;&gt;Flutter plugin for DevOps&lt;/a&gt; a dev already made the tool for us. Thanks, &lt;a href=&quot;https://marketplace.visualstudio.com/publishers/aloisdeniel&quot;&gt;Aloïs&lt;/a&gt; for doing the heavy work! We can use this tool for our purpose.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*ngPggahl55mBGRJ-FGlSRg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking that button, you would be shown on this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*52i3t0Qhvy239I_MS3GPpA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now in what you have to do is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Choose the &lt;strong&gt;organization&lt;/strong&gt; you want to install.&lt;/li&gt;
  &lt;li&gt;Click install.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2-installing-the-nelitfyplugin&quot;&gt;2. Installing the Nelitfy plugin&lt;/h4&gt;

&lt;p&gt;Install the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=aliencube.netlify-cli-extensions&quot;&gt;Netlify plugin for DevOps&lt;/a&gt;. Thanks, &lt;a href=&quot;https://marketplace.visualstudio.com/publishers/aliencube&quot;&gt;Aliencube&lt;/a&gt; for doing the heavy work! We can use this tool for our purpose.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*jv3I_5-xsOTw5rvU9OwA8A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking that button, you would be shown on this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*MuPn6jiFUqW8KnVkxl4Xww.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now in what you have to do is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Choose the &lt;strong&gt;organization&lt;/strong&gt; you want to install.&lt;/li&gt;
  &lt;li&gt;Click install.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;creating-your-netlifysite&quot;&gt;Creating your Netlify site&lt;/h3&gt;

&lt;p&gt;This section will discuss how you can create an empty Netlify site using Netlify CLI. We will be using npm to install it for us. In my case, I use Ubuntu 18.04 as the host OS for the npm installation.&lt;/p&gt;

&lt;h4 id=&quot;1-install-netlifycli&quot;&gt;1. Install Netlify CLI&lt;/h4&gt;

&lt;p&gt;To install Netlify CLI you just need to run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install netlify-cli -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the installation is complete, check if it’s installed correctly by running this command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netlify
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-log-in-to-netlify-from-thecli&quot;&gt;2. Log in to Netlify from the CLI&lt;/h4&gt;

&lt;p&gt;Before you can start using the CLI, Netlify needs you to authenticate yourself.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netlify login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then a browser window will open:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*4FnW4DUyG4w5_kPC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-creating-a-blanksite&quot;&gt;3. Creating a blank site&lt;/h4&gt;

&lt;p&gt;After finishing your login, create a blank site using this command:&lt;/p&gt;

&lt;p&gt;netlify sites:create –name _&lt;site name=&quot;&quot;&gt;_&lt;/site&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-retrieving-your-site-id-and-personal-accesstoken&quot;&gt;4. Retrieving your Site ID and personal access token&lt;/h4&gt;

&lt;p&gt;To run continuous development remotely you would need both your site ID and personal access token to help you&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*PxWjk8axlVeVwmUt33_gQw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Retrieve your Site ID by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Going into the site settings.&lt;/li&gt;
  &lt;li&gt;Copy the API ID value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The next step would be to retrieve the personal access token.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*tbk9PgZpJudHMFp6kUvdvg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the User settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*AKe8XmKjoeIzeCfples1MA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get an access token, you would have to make a new one:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to the Applications tab.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;New access token&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Copy and save the access token shown on the next screen, and save it because you will need it for later.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-cicdpipeline&quot;&gt;Creating the CI/CD Pipeline&lt;/h3&gt;

&lt;p&gt;This part is my favorite because it uses Azure DevOps. I honestly love the pipeline building experience using the UI (e.g the classic editor). But how do you build Flutter projects using Azure DevOps you ask?&lt;/p&gt;

&lt;h4 id=&quot;1-creating-the-cipipeline&quot;&gt;1. Creating the CI pipeline&lt;/h4&gt;

&lt;p&gt;If you are using Azure DevOps there is no way we can attach a CI/CD pipeline from Netlify’s side as with Github, Gitlab, or Bitbucket. So, we have to get down and dirty and do it ourselves (well with a little help).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*tlnoTcTVMomfdREqv4-3gg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, create your pipeline:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click on &lt;strong&gt;Pipelines&lt;/strong&gt; on the left pane.&lt;/li&gt;
  &lt;li&gt;Open the &lt;strong&gt;Pipelines&lt;/strong&gt; directory.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;New pipeline&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now the beautiful thing about Azure DevOps is they have a UI for all of this, so you don’t need to use YAML at all. Though you can generate YAML code from the UI. Using the classic editor, you don’t have two remember YAML syntaxes and can easily make deployment steps using the visuals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*QedkUDLpwccXAdxvYegBYg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can always configure using YAML in other services, but let’s face it, using UI is so much better. To enable pipeline configurations using the UI, when you are creating your pipeline click the small &lt;strong&gt;use classic editor&lt;/strong&gt; link below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*kkHm8ht19fXaH29NTHqcyw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After selecting the classic editor, configure your project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*eKEEhy8lVmAWILNp5D8kcg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These configurations would be needed to state which project you will be using in the pipeline, start by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Selecting Azure Repos Git, to select repositories from Azure DevOps.&lt;/li&gt;
  &lt;li&gt;Selecting your team project.&lt;/li&gt;
  &lt;li&gt;Selecting the repository you want to CI.&lt;/li&gt;
  &lt;li&gt;Select the repository branch.&lt;/li&gt;
  &lt;li&gt;Click continue.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*Xy65VtOhVJU4j-Td-3Pk7w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;Empty job&lt;/strong&gt; button to create a clean slate for our Flutter deployment configuration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*TS7XNzRgBE7XTmMSC879Jw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After &lt;strong&gt;Agent job 1&lt;/strong&gt; show up you need to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the &lt;strong&gt;+&lt;/strong&gt; button to add new tasks in the pipeline.&lt;/li&gt;
  &lt;li&gt;Search for &lt;strong&gt;Flutter Install&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Flutter Install&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*XGnxKbjSWXkEBuElDjgNAg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After adding Flutter install we can add the Flutter test task to enable testing in our pipeline before being built and deployed. But because I prepared a small app and I am focusing on deployments I wouldn’t be adding testing to the task list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*1wCLnwZr7P-flEIcxA3W8g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, add two &lt;strong&gt;Flutter Command&lt;/strong&gt; tasks to the pipeline. FYI, tasks are forms of stages deliberately visualizing how our CI/CD pipeline connects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let’s face it, using UI is so much better.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*EFSPGRwA00ZhLFDP72DNrQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first &lt;strong&gt;Flutter Command&lt;/strong&gt; task will be to enable web configurations (i.e allow builds for web projects).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the &lt;strong&gt;Flutter Command&lt;/strong&gt; task.&lt;/li&gt;
  &lt;li&gt;Change the display name to &lt;strong&gt;Flutter Enable Web&lt;/strong&gt; (optional).&lt;/li&gt;
  &lt;li&gt;Add the Flutter arguments to enable web configurations:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;config –enable-web&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*oeQhNtLL0XWYoPA0Uzh51Q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To build the web project, we have to run it manually using the &lt;strong&gt;Flutter Command&lt;/strong&gt; task.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the &lt;strong&gt;Flutter Command&lt;/strong&gt; task.&lt;/li&gt;
  &lt;li&gt;Change the display name to &lt;strong&gt;Flutter Run Build Web&lt;/strong&gt; (optional).&lt;/li&gt;
  &lt;li&gt;Add the Flutter arguments to build web projects:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;build web&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*xsFcjMbriYuUmwspfakwLw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add a new task to &lt;strong&gt;Copy files&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the &lt;strong&gt;+&lt;/strong&gt; button to add a new task.&lt;/li&gt;
  &lt;li&gt;Search for &lt;strong&gt;copy files&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Add the &lt;strong&gt;Copy files&lt;/strong&gt; task.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*JcHH8-BvCC1_pmuI7oDiNQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After we build the project, build files will need to be copied to the artifacts directory:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the &lt;strong&gt;Copy Files&lt;/strong&gt; task.&lt;/li&gt;
  &lt;li&gt;Change the source folder to &lt;strong&gt;$(Build.SourcesDirectory)/build/web&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Change the target folder to &lt;strong&gt;$(Build.ArtifactStagingDirectory)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*i2HONWrqH04lMo1WEatx0w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add a new task to &lt;strong&gt;Publish build artifacts&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the &lt;strong&gt;+&lt;/strong&gt; button to add a new task.&lt;/li&gt;
  &lt;li&gt;Search for &lt;strong&gt;publish build artifact&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Add the &lt;strong&gt;Publish build artifacts&lt;/strong&gt; task.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*K1sbK9jzcue5qpJNITm3iw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After adding the &lt;strong&gt;Publish build artifacts&lt;/strong&gt; task you can change the name of the artifact after publishing in this case I changed it to &lt;strong&gt;ci-artifact&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*WSvqzb2DlskuGHlrnIE8qw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When all is done, save the CI pipeline.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; &lt;strong&gt;If you want to use YAML you can copy and paste this YAML file here:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;undefined
undefined&lt;/p&gt;

&lt;h4 id=&quot;2-creating-the-cdpipeline&quot;&gt;2. Creating the CD pipeline&lt;/h4&gt;

&lt;p&gt;The continuous deployment section will be used to push our builds directly to Netlify. This part is similar to most JAMStack apps such as React, Vue, Next, and Flutter Web. &lt;a href=&quot;https://codeburst.io/deploying-a-site-to-netlify-with-azure-devops-2743abb61db0&quot;&gt;An article by Clyde D’Souza&lt;/a&gt; influenced this particular section. But of course, I modified it slightly because the project we’re using is a Flutter project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*OygcnF5mrnsRGgLFKBMisg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the releases pipeline, click on the Releases tab on the left side of the screen:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the &lt;strong&gt;Pipelines&lt;/strong&gt; on the left side of the tab.&lt;/li&gt;
  &lt;li&gt;Open &lt;strong&gt;Releases&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;New&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;New release pipeline&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*9jXOfo-ozzfogunzdGCO_A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Create an empty job.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*H8SF23SAP0kioaI358_YTA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Connect your CD pipeline with your CI pipeline:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add an artifact.&lt;/li&gt;
  &lt;li&gt;Select your project.&lt;/li&gt;
  &lt;li&gt;Choose your CI pipeline&lt;/li&gt;
  &lt;li&gt;Add the pipeline.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*4TAHp-48BRxcxNa7805bPQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enable the continuous deployment trigger to start after a successful build:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the lightning logo to open the trigger page.&lt;/li&gt;
  &lt;li&gt;Click the &lt;strong&gt;Enabled&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*ZnM9xtSoIvqoer3DITJUmw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add a new task to the new CD pipeline:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open your &lt;strong&gt;Tasks&lt;/strong&gt; tab.&lt;/li&gt;
  &lt;li&gt;Click the &lt;strong&gt;+&lt;/strong&gt; button.&lt;/li&gt;
  &lt;li&gt;Search for &lt;strong&gt;Extract files&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Add the task to the pipeline.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*Yuz4WMvTXt9tQm_4pj3MZQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Extract the artifacts according to the build Id.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*w341jpMUhSmQmu0DVNk3SA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add a new task to the new CD pipeline:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the &lt;strong&gt;+&lt;/strong&gt; button.&lt;/li&gt;
  &lt;li&gt;Search for &lt;strong&gt;Netlify&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Add the &lt;strong&gt;Install Netlify CLI&lt;/strong&gt; task to the pipeline.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*Z9Vq4cGKp6rd1U0YeKSbZQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add a new task to the new CD pipeline:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the &lt;strong&gt;+&lt;/strong&gt; button.&lt;/li&gt;
  &lt;li&gt;Search for &lt;strong&gt;Netlify&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Add the &lt;strong&gt;Deploy Website&lt;/strong&gt; task to the pipeline.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To connect our CD pipeline to our Netlify site, we need to have our access tokens and our site ID. We utilize pipeline variables to make it more accessible and provide secrecy to the token.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*tEpST9H8SwhfhWj8z-NsyQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;+ Add&lt;/strong&gt; button twice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*HKk674mSac5xSASz-rfr2A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will be shown with 4 input boxes. Put the name of the variable inside the left boxes and the values in the right. For convenience name the access token variable PAT, and name the other variable SiteID respectively.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*6Qamra986ORQOxI7nLyg8w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Change the deployment configuration:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click &lt;strong&gt;Deploy to Netlify&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Insert your access token.&lt;/li&gt;
  &lt;li&gt;Insert the Site ID.&lt;/li&gt;
  &lt;li&gt;Select the build source directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your CD pipeline should be finished, save the pipeline and try running it yourself! You can check the dummy site I deployed &lt;a href=&quot;https://miniature-flutter-milkstore.netlify.app/#/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this tutorial, you have learned how to Flutter web deployments using CI/CD and Azure DevOps. We then deployed the site on Netlify.&lt;/p&gt;

&lt;p&gt;To recap what we have done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Installed the Flutter and Netlify dependencies.&lt;/li&gt;
  &lt;li&gt;Created a blank site on Netlify.&lt;/li&gt;
  &lt;li&gt;Retrieved the authorization token and site ID from Netlify.&lt;/li&gt;
  &lt;li&gt;Prepared the CI/CD Pipelines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You now have an open playbook to use when you want to automate deployments. In the next tutorial, we will be looking into how we can utilize &lt;a href=&quot;https://link.medium.com/mI4Cq5Y9Acb&quot;&gt;Github Actions to make a CI/CD pipeline for Flutter Web and Netlify.&lt;/a&gt;&lt;/p&gt;</content><author><name>Agustinus Theodorus</name></author><category term="tech" /><summary type="html">Developing web apps has become easier over the years. With Flutter it became very easy and fun. But to be honest, deploying it is sometimes a pain. Most services are not ready for Flutter projects being hosted on the web. Sure, some are but it needs a bit of tinkering.</summary></entry><entry><title type="html">Setting Up A Multinode RabbitMQ Cluster On Linux</title><link href="https://agustinustheo.github.io/tech/2021/01/20/setting-up-multinode-rabbitmq-cluster-on-linux.html" rel="alternate" type="text/html" title="Setting Up A Multinode RabbitMQ Cluster On Linux" /><published>2021-01-20T00:51:10+07:00</published><updated>2021-01-20T00:51:10+07:00</updated><id>https://agustinustheo.github.io/tech/2021/01/20/setting-up-multinode-rabbitmq-cluster-on-linux</id><content type="html" xml:base="https://agustinustheo.github.io/tech/2021/01/20/setting-up-multinode-rabbitmq-cluster-on-linux.html">&lt;p&gt;Installing RabbitMq on multiple remote servers can be a hassle. To connect multiple instances into one cluster we must first install RabbitMq on each remote server. These next two steps will walk through how we can install RabbitMq instances.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*noAgkXTihXU2PYuu&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this tutorial, we will be installing RabbitMq using a Centos 8 Linux distro. The RabbitMq version used in this tutorial is 3.8.9.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-is-clustering-for&quot;&gt;What is clustering for?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*hiLQ86ofVEj3P8Ke&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, clustering is used to combine multiple instances of RabbitMq into one giant central message queue. Clustering can be done on remote instances of RabbitMq on different servers. The purpose of the cluster is to handle massive amounts of message queues from apps, balancing the load on multiple servers rather than on a single server.&lt;/p&gt;

&lt;h3 id=&quot;add-the-required-dependencies&quot;&gt;Add the required dependencies&lt;/h3&gt;

&lt;h4 id=&quot;install-the-required-repositories&quot;&gt;Install the required repositories&lt;/h4&gt;

&lt;p&gt;Add the RabbitMq repository in the repo configurations file. Open the config file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /etc/yum.repos.d/rabbitmq-server.repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add this to the lines below:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[rabbitmq-server]  
name=rabbitmq-server  
baseurl=[https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/$basearch](https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/$basearch)  
repo_gpgcheck=1  
gpgcheck=0  
enabled=1  
gpgkey=[https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey](https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey)  
sslverify=1  
sslcacert=/etc/pki/tls/certs/ca-bundle.crt  
metadata_expire=300
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;add-hostname-to-the-hostsfile&quot;&gt;Add Hostname to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hosts&lt;/code&gt; file&lt;/h4&gt;

&lt;p&gt;RabbitMq is built on top of Erlang. So it would make sense for us to install it beforehand. &lt;strong&gt;This part is very crucial as if you do not ad the hostname to&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; &lt;strong&gt;then&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rabbitmqctl status&lt;/code&gt; &lt;strong&gt;will not work.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo “127.0.0.1 $(hostname -s)” | sudo tee -a /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;setting-up-rabbitmqserver&quot;&gt;Setting Up RabbitMq Server&lt;/h3&gt;

&lt;h4 id=&quot;install-rabbitmqserver&quot;&gt;Install RabbitMq Server&lt;/h4&gt;

&lt;p&gt;After completing the previous configuration setup steps, install RabbitMq by using this command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo dnf install -y rabbitmq-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After installation is completed, check if the installation is correct by running:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rpm -qi rabbitmq-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;open-ports&quot;&gt;Open Ports&lt;/h4&gt;

&lt;p&gt;Centos has a pre-installed firewall called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewalld&lt;/code&gt;. It blocks all ports from connecting unless asked to. So we must whitelist the TCP ports that are going to be used by RabbitMq.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo firewall-cmd --zone=public --permanent --add-port={5672,15672}/tcp  
sudo firewall-cmd --reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;start-the-rabbitmqservice&quot;&gt;Start the RabbitMq service&lt;/h4&gt;

&lt;p&gt;The RabbitMq service doesn’t start on its own when you install it. You have to start it manually, then enable it to run on server startup. To start the RabbitMq service (the service might take a minute or two to start):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl start rabbitmq-server.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To enable the service run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl enable rabbitmq-server.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To check if the service is still running:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rabbitmqctl status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;enable-rabbitmq-management&quot;&gt;Enable RabbitMq Management&lt;/h4&gt;

&lt;p&gt;If you want to enable the RabbitMq admin dashboard, run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rabbitmq-plugins enable rabbitmq_management
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then try to open the dashboard from the browser:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://*your-server-ip*:15672
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;setting-up-rabbitmqcluster&quot;&gt;Setting Up RabbitMq Cluster&lt;/h3&gt;

&lt;p&gt;After setting up RabbitMq on multiple servers (minimum of 2 servers) we now can continue to set up instances for the master and slave nodes. Choose one server as the master node as the cluster host, then use the other nodes as a slave cluster.&lt;/p&gt;

&lt;h4 id=&quot;setting-up-the-masternode&quot;&gt;Setting Up The Master Node&lt;/h4&gt;

&lt;p&gt;Whitelist the TCP port 4369 for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epmd&lt;/code&gt;, a helper discovery daemon used by RabbitMQ nodes and CLI tools, and port 25672 for instance finding.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo firewall-cmd —-zone=public —-permanent —-add-port={4369,25672}/tcp  
sudo firewall-cmd —-reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the hosts for each cluster, in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; file&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hosts&lt;/code&gt; file add the IP and hostname for each instance. The configuration would be as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node 1 IP node 1 hostname  
node 2 IP node 2 hostname  
node 3 IP node 3 hostname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The order doesn’t have to be master first, but it does need to have all cluster IPs and hostnames for it to work. An example configuration is as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10.240.200.111 rabbitmq-1  
10.240.200.112 rabbitmq-2  
10.240.200.113 rabbitmq-3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.erlang.cookie&lt;/code&gt; from the master node&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cat /var/lib/rabbitmq/.erlang.cookie
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save the token output in your notepad.&lt;/p&gt;

&lt;h4 id=&quot;setting-up-the-slavenodes&quot;&gt;Setting Up The Slave Nodes&lt;/h4&gt;

&lt;p&gt;Whitelist the TCP port 4369 for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epmd&lt;/code&gt; a helper discovery daemon used by RabbitMQ nodes and CLI tools, and port 25672 for instance finding.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo firewall-cmd —-zone=public —-permanent —-add-port={4369,25672}/tcp  
sudo firewall-cmd —-reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the hosts for each cluster, in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; file&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hosts&lt;/code&gt; file add the IP and hostname for each instance. The configuration would be as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node 1 IP node 1 hostname  
node 2 IP node 2 hostname  
node 3 IP node 3 hostname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The order doesn’t have to be master first, but it does need to have all cluster IPs and hostnames for it to work. An example configuration is as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10.240.200.111 rabbitmq-1  
10.240.200.112 rabbitmq-2  
10.240.200.113 rabbitmq-3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Stop the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rabbitmq-server&lt;/code&gt; instance and replace the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.erlang.cookie&lt;/code&gt; inside the slave node with the masters.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo su  
systemctl stop rabbitmq-server  
echo -n “*erlang cookie from master node*” &amp;gt; /var/lib/rabbitmq/.erlang.cookie  
systemctl start rabbitmq-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Repeat this setup on all the nodes!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;join-the-slave-nodes-with-the-masternode&quot;&gt;Join The Slave Nodes With The Master Node&lt;/h3&gt;

&lt;p&gt;Stop the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rabbitmq-server&lt;/code&gt; instance, reset the node and join it with the master node.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rabbitmqctl stop_app  
sudo rabbitmqctl reset  
sudo rabbitmqctl join_cluster rabbit@*master node hostname*  
sudo rabbitmqctl start_app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reset-the-masternode&quot;&gt;Reset The Master Node&lt;/h3&gt;

&lt;p&gt;Reset the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rabbitmq-server&lt;/code&gt; in the master node.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rabbitmqctl stop_app  
sudo rabbitmqctl reset  
sudo rabbitmqctl start_app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;check-the-clusterstatus&quot;&gt;Check The Cluster Status&lt;/h3&gt;

&lt;p&gt;To check the cluster status, run this command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rabbitmqctl cluster_status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In the end, when we have finished installation, login to the RabbitMq management dashboard for one of the nodes and it would have more than one cluster like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*Vx0rb7MN4gugsctF&quot; alt=&quot;&quot; /&gt;
undefined&lt;/p&gt;

&lt;p&gt;Of course, there are advantages in using manual installs for RabbitMq. The pros would be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can save space on each server by only installing RabbitMq and nothing else.&lt;/li&gt;
  &lt;li&gt;Particularly on VMs, you can use Ansible to speed up the installation process by doing the repeatable tasks from a single command line.&lt;/li&gt;
  &lt;li&gt;You understand thoroughly the process of building a RabbitMq instance from the ground up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then the cons would be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Managing the firewalls for each server can be complicated.&lt;/li&gt;
  &lt;li&gt;It is faster for us to use Docker during container set up for each server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But if you want to read more on this topic, and read some of the references I had when making this tutorial you can check out these links below:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rabbitmq.com/clustering.html&quot;&gt;Official RabbitMQ Clustering Guide&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.osradar.com/how-to-install-rabbitmq-on-rhel-8-centos-8/&quot;&gt;How to Install RabbitMQ on RHEL 8 / CentOS 8 — Linux Windows and android Tutorials (osradar.com)&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/pobsuwan/22aa4a9e0a217d22e12800a432933881&quot;&gt;How to config rabbitmq server cluster [3 nodes] (github.com)&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we have an open playbook for you to use the next time you want to setup RabbitMq on your systems manually.&lt;/p&gt;</content><author><name>Agustinus Theodorus</name></author><category term="tech" /><summary type="html">Installing RabbitMq on multiple remote servers can be a hassle. To connect multiple instances into one cluster we must first install RabbitMq on each remote server. These next two steps will walk through how we can install RabbitMq instances.</summary></entry><entry><title type="html">The Microservice Architecture Perspective</title><link href="https://agustinustheo.github.io/tech/2020/12/31/the-microservice-architecture-perspective.html" rel="alternate" type="text/html" title="The Microservice Architecture Perspective" /><published>2020-12-31T23:51:07+07:00</published><updated>2020-12-31T23:51:07+07:00</updated><id>https://agustinustheo.github.io/tech/2020/12/31/the-microservice-architecture-perspective</id><content type="html" xml:base="https://agustinustheo.github.io/tech/2020/12/31/the-microservice-architecture-perspective.html">&lt;p&gt;Making software that serves more than a couple of thousand users can be hard. The difficulty is not in making the app itself but in how we make the app reliable. Microservices is a solution to messy problems like these. Instead of relying on one large server, we use a bunch of small ones to solve our problem. To elaborate on this subject further here are a few perspectives I have on the microservices architecture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*VzeqoAS5yZrIpeZQ&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;one-down-many-more-togo&quot;&gt;One Down, Many More To Go&lt;/h3&gt;

&lt;p&gt;In my honest opinion, one of the reasons I go with a microservice is the reliability factor. With multiple servers, this can be the case. We add reliability to the service by adding more of them. This technique is called &lt;a href=&quot;https://www.citrix.com/en-id/glossary/load-balancing.html#:~:text=Load%20balancing%20is%20defined%20as,server%20capable%20of%20fulfilling%20them.&quot;&gt;load balancing.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*trVIG9l2V7inAkov.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of burdening all the traffic to one server, you can balance it to multiple servers. So it can be nearly impossible to down the service. The best part of this is that you don’t need to have expensive high throughput servers to make this happen. For example, you can host your server on a few &lt;a href=&quot;https://www.digitalocean.com/products/droplets/&quot;&gt;digital ocean droplets&lt;/a&gt;, instead of one large one.&lt;/p&gt;

&lt;p&gt;Though load balancing alone cannot determine a microservice, there are other characteristics that would need to be fulfilled. This is but only one of the advantages of the microservice pattern.&lt;/p&gt;

&lt;p&gt;If you are using a monolith pattern logically you can still use load balancing, the only downside would be that you would need multiple high throughput servers to serve your app. Multiplying the cost.&lt;/p&gt;

&lt;h3 id=&quot;pay-for-what-youneed&quot;&gt;Pay For What You Need&lt;/h3&gt;

&lt;p&gt;Before I start, let me say. This section is debatable. I am explaining this from my point of view and my previous experiences. Because when your entire service is determined by small services, it can be easy to cut costs. We can buy only the things that we need.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*rTd5CdXZV626QTVDZuK_EA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For explanation purposes let’s say a 1 GB droplet can handle about 1k users. So to handle 5k users you probably would need to use the 8GB droplet for the price of $40 a month.&lt;/p&gt;

&lt;p&gt;Instead, you can use 3 droplets. Two 1 GB droplets and one 4 GB droplet for $30 a month. We buy two 1 GB droplets so we can use one for the service and use the other one for load balancing. With this scheme, you saved $10 a month.&lt;/p&gt;

&lt;p&gt;This is a very simple example. A better one would be when we have separate microservices that connect to each other, we can tune the prices to our exact use of computing power.&lt;/p&gt;

&lt;p&gt;For example, the donuts API may have more load than the coffee API. We can then scale up the donuts API server to be able to handle those requests. Being able to specify upgrades by service can help reduce costs tremendously.&lt;/p&gt;

&lt;h3 id=&quot;separate-your-interests&quot;&gt;Separate Your Interests&lt;/h3&gt;

&lt;p&gt;Monoliths have this habit of merging all services together, related or not. This causes a problem when one of the services goes down, it will take the entire app down with it. If you value reliability, you wouldn’t want that.&lt;/p&gt;

&lt;p&gt;Using the microservice architecture each service can be separated, making it independent of one another. This type of API development is called domain driven development or DDD. It is a very interesting way of designing systems small that can scale big. &lt;a href=&quot;https://www.confluent.io/blog/microservices-apache-kafka-domain-driven-design/#:~:text=Microservices%20have%20a%20symbiotic%20relationship,that%20makes%20the%20system%20work.&quot;&gt;You can read more about DDD here&lt;/a&gt;. Reading more into this topic might lead you to cool system design patterns like &lt;a href=&quot;https://microservices.io/patterns/data/cqrs.html&quot;&gt;CQRS&lt;/a&gt;, &lt;a href=&quot;https://microservices.io/patterns/data/database-per-service.html&quot;&gt;Database per service&lt;/a&gt;, and &lt;a href=&quot;https://microservices.io/patterns/data/api-composition.html&quot;&gt;API Composition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*kKsAICXGDY_KbwOpgxSaBQ.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The picture above explains my point perfectly. Connections from the client would be made to a gateway/edge API. The edge API would then connect to the multiple microservices available for each specific request. With the corresponding databases behind each specific API.&lt;/p&gt;

&lt;p&gt;Say, the user wants some books, of course, the data would be retrieved from the books API. After seeing the catalog of books, the user made up their mind and wishes to check out. The user is then connected to the check out API. Notice that all the services are independent of each other it does not coincide with one another other than the edge API. It adds reliability to the app.&lt;/p&gt;

&lt;h3 id=&quot;scale-more&quot;&gt;Scale More!&lt;/h3&gt;

&lt;p&gt;Why does this section have an exclamation mark? Because this is the main gist of using microservices. It is the best feature anyone could have asked for. Put reliability and scalability together and what do you have? A great user experience.&lt;/p&gt;

&lt;p&gt;Not all companies might need the blessing of microservices but for those that do it really does make a huge difference. All the sections before this one support this. Separable domains, cost-effectiveness, and reliability.&lt;/p&gt;

&lt;p&gt;But you do not need to scale everything. When you are building a team of services using microservices will help you in the long run, but when you are making an MVP or some other small apps you would not need to implement microservices at all. It might even slow you down!&lt;/p&gt;

&lt;p&gt;Microservices is not the grand bullet for everything, even though it has both reliability and scalability to its name. It has good things to offer for select cases, not for everyone.&lt;/p&gt;

&lt;h3 id=&quot;small-andcompact&quot;&gt;Small and Compact&lt;/h3&gt;

&lt;p&gt;Microservices like the name entails are very small apps that communicate with each other. With specificity in mind, teams can deploy new services quickly without breaking another.&lt;/p&gt;

&lt;p&gt;This coincides perfectly with agile teams that want to reach a certain target. Deployments are easy because it allows for easy and straightforward testing. You only need to test the things that you deploy, there is no need to test the other services along with it.&lt;/p&gt;

&lt;p&gt;Almost all the articles I’ve read about microservices applaud the ease of deployments this architecture has to offer. Though that’s not all the benefits of being small and compact.&lt;/p&gt;

&lt;p&gt;Maintainability wise, it will be much easier than monoliths. The functions are simple because the folders aren’t merged into one project. Honestly from my own experience handling a monolith, traversing the folders was very difficult. Filenames can sometimes be similar in a way that I confuse which service is which.&lt;/p&gt;

&lt;p&gt;Sure, people can say that a confusing monolith project reeks of bad code management. When you have more than 100 features in a project it does tend to get a little messy. Add to the number of teams responsible for different features contributing to the &lt;strong&gt;same codebase&lt;/strong&gt; 🤯.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I can only imagine the number of branches that repo has…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;more-autonomy-and-faster-development-speeds&quot;&gt;More Autonomy and Faster Development Speeds&lt;/h3&gt;

&lt;p&gt;With microservice, this doesn’t have to be. Microservice brings more autonomy to the team. Working together between teams is not easy. We have our own schedules that we need to attend. But when we use the microservices concept, the pain of inter-team management becomes invisible.&lt;/p&gt;

&lt;p&gt;All you need would be a coding standard, and you would be good to go. Though more autonomy, coupled with faster development could lead to trouble &lt;strong&gt;if you don’t have good documentation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let me make this clear, working autonomously is great and all. But in the end, you still need to communicate. What better way to miscommunicate other than having no documentation. Believe me, I have experienced these kinds of things first hand. Microservices does not solve problems like these.&lt;/p&gt;

&lt;p&gt;With more autonomy teams can be more business-oriented with their goals, timelines become much shorter and development can focus more on new features.&lt;/p&gt;

&lt;h3 id=&quot;with-great-power-comes-great-documentation&quot;&gt;With Great Power Comes Great Documentation&lt;/h3&gt;

&lt;p&gt;Elaborating from the previous section, a good analogy for microservices would be “With great power comes great responsibility”. I am not kidding, when you have tons of services you would &lt;strong&gt;wish&lt;/strong&gt; &lt;strong&gt;for good documentation&lt;/strong&gt;. For a good perspective here is an illustration of the Netflix microservice backend.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*d9cZNb3AX_fOgC-y.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now imagine, how much of that would you remember. The answer is none. That’s why documentation is important. Probably using Netflix as an example is a huge exaggeration — &lt;em&gt;but hey it gets the point across.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now I know — &lt;em&gt;every application needs documentation&lt;/em&gt;. That’s true but it becomes double for microservices. There are benefits to good documentation though. The better documented the microservice is, the reusable probability of each service will be increased. This brings us to the next point.&lt;/p&gt;

&lt;h3 id=&quot;reusability&quot;&gt;Reusability&lt;/h3&gt;

&lt;p&gt;What I love about writing code is how much less of it I have to write. Get what I am saying? Reusable components, reusable APIs, reusable &lt;em&gt;everything&lt;/em&gt;! I would integrate every one of my apps into one large system, and if I can reuse some parts of it for another app I would do it without notice.&lt;/p&gt;

&lt;p&gt;The part that I like about microservices is that it’s very portable, I mean one service can be accessed by many. That’s why I usually try to make microservices as general as I can make it — &lt;em&gt;doesn’t mean that I won’t make it specific when I need to&lt;/em&gt;. It just comes as a natural thing to do to reuse things you made.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;To summarize microservice architectures are usually used to help increase the reliability of a system. The benefits of using a microservice architecture are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Made to be reliable.&lt;/li&gt;
  &lt;li&gt;Pay for what you need.&lt;/li&gt;
  &lt;li&gt;Write separate applications for each domain.&lt;/li&gt;
  &lt;li&gt;Have a nature to scale.&lt;/li&gt;
  &lt;li&gt;Small and compact.&lt;/li&gt;
  &lt;li&gt;Separated development for teams that wants to move fast.&lt;/li&gt;
  &lt;li&gt;Reusability factor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though the microservice architecture does come with its faults. The disadvantages of using a microservice are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;With great power, comes great documentation.&lt;/li&gt;
  &lt;li&gt;Small companies with few teams are not suitable for this architecture.&lt;/li&gt;
  &lt;li&gt;Does not fit every business model (e.g monoliths are better for MVPs).&lt;/li&gt;
  &lt;li&gt;Because it has a nature to scale, it can become bloated if not checked. We can’t all be like Netflix.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was my perspective regarding microservices. I hope it was clear enough of an explanation.&lt;/p&gt;</content><author><name>Agustinus Theodorus</name></author><category term="tech" /><summary type="html">Making software that serves more than a couple of thousand users can be hard. The difficulty is not in making the app itself but in how we make the app reliable. Microservices is a solution to messy problems like these. Instead of relying on one large server, we use a bunch of small ones to solve our problem. To elaborate on this subject further here are a few perspectives I have on the microservices architecture.</summary></entry><entry><title type="html">Automating Flutter Web Deployments to Netlify Using GitHub Actions</title><link href="https://agustinustheo.github.io/tech/2020/12/28/automating-flutter-web-deployments-to-netlify-using-github-actions.html" rel="alternate" type="text/html" title="Automating Flutter Web Deployments to Netlify Using GitHub Actions" /><published>2020-12-28T23:18:18+07:00</published><updated>2020-12-28T23:18:18+07:00</updated><id>https://agustinustheo.github.io/tech/2020/12/28/automating-flutter-web-deployments-to-netlify-using-github-actions</id><content type="html" xml:base="https://agustinustheo.github.io/tech/2020/12/28/automating-flutter-web-deployments-to-netlify-using-github-actions.html">&lt;p&gt;Lately, there has been a lot of fuss over Flutter. Some people call it the future, while some say it’s overrated. But I think it’s a good framework to learn nonetheless. The sheer amount of things that can be done with Flutter is unbelievable, including Android, iOS, desktop, and web programming.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/0*rjDmgSKL-lNurUpp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here in this tutorial, I’m going to share how to implement your Flutter web deployments using GitHub Actions. Also, we’re going to use Netlify. Why Netlify? Because, honestly, Netlify is very easy to use. Now, without further ado, let’s get to it.&lt;/p&gt;

&lt;h3 id=&quot;creating-your-netlifysite&quot;&gt;Creating Your Netlify Site&lt;/h3&gt;

&lt;p&gt;This section will discuss how you can create an empty Netlify site using the Netlify CLI. We’ll be using npm to install it for us. In my case, I use Ubuntu 18.04 as the host OS for the npm installation.&lt;/p&gt;

&lt;h4 id=&quot;1-install-the-netlifycli&quot;&gt;1. Install the Netlify CLI&lt;/h4&gt;

&lt;p&gt;To install the Netlify CLI, you just need to run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install netlify-cli -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the installation is complete, check if it’s installed correctly by running this command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netlify
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-log-in-to-netlify-from-thecli&quot;&gt;2. Log in to Netlify from the CLI&lt;/h4&gt;

&lt;p&gt;Before you can start using the CLI, Netlify needs you to authenticate yourself.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netlify login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then a browser window will open:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/0*4FnW4DUyG4w5_kPC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-creating-a-blanksite&quot;&gt;3. Creating a blank site&lt;/h4&gt;

&lt;p&gt;After finishing your login, create a blank site using this command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netlify sites:create --name _&amp;lt;site name&amp;gt;_
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;4-retrieving-your-site-id-and-personal-accesstoken&quot;&gt;4. Retrieving your Site ID and personal access token&lt;/h4&gt;

&lt;p&gt;To run continuous development remotely, you need both your site ID and your personal access token to help you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*PxWjk8axlVeVwmUt33_gQw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Retrieve your site ID by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Going into the site settings.&lt;/li&gt;
  &lt;li&gt;Copy the API ID value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The next step would be to retrieve the personal access token.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/328/1*tbk9PgZpJudHMFp6kUvdvg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the user settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*AKe8XmKjoeIzeCfples1MA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get an access token, you have to make a new one:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to the Applications tab.&lt;/li&gt;
  &lt;li&gt;Click “New access token.”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Copy and save the access token shown on the next screen, and save it because you’ll need it later.&lt;/p&gt;

&lt;h3 id=&quot;set-repository-secrets&quot;&gt;Set Repository Secrets&lt;/h3&gt;

&lt;p&gt;After we’ve retrieved the access tokens and site ID, we’ll save them inside the repository secret.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Why do we need to use repository secrets? To prevent sensitive IDs or tokens from being pushed to the repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*ZmJUTolPTUB9jV4wEESG1g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To create a secret:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to the repository settings.&lt;/li&gt;
  &lt;li&gt;Click Secrets on the left-side tab.&lt;/li&gt;
  &lt;li&gt;Click “New repository secret.”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*q7bhT-rvvr43-Ica5V5qeg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the “New secret” page input the secret name and value. When finished, click the “Add secret” button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*wsVX08jtCaYK8_qixHKKiw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In its entirety, we’ve added about three secrets: the GitHub personal access token, the Netlify personal access token, and the Netlify site ID.&lt;/p&gt;

&lt;h3 id=&quot;retrieving-the-github-accesstoken&quot;&gt;Retrieving the GitHub Access Token&lt;/h3&gt;

&lt;p&gt;Because we’re going to automate deployments using GitHub Actions, a personal access token would be required. You’d need to open your &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;GitHub Developer Settings here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*FIAEH_LGk_2ExSWE0hKyAw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After opening your developer settings page:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the personal access tokens page.&lt;/li&gt;
  &lt;li&gt;Generate a new token for GitHub Actions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*2TbMqTdUDUbTJ7pwaz2p8A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next steps would be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Input a name for your token.&lt;/li&gt;
  &lt;li&gt;Check the workflow to give access to GitHub Actions.&lt;/li&gt;
  &lt;li&gt;Scroll to the bottom of the page.&lt;/li&gt;
  &lt;li&gt;Click the “Generate token” button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*iL5anhz6IvIigtRGPfiF7A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copy the access token and save it somewhere because it’ll be used later on.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-cicdworkflow&quot;&gt;Creating the CI/CD Workflow&lt;/h3&gt;

&lt;p&gt;CI/CD using GitHub Actions is fairly simple. It requires us to make a YAML file. This YAML file is called a &lt;em&gt;workflow&lt;/em&gt; in GitHub Actions because it defines the steps needed to form a CI/CD.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: Flutter-CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To start our workflow, we must enable builds to start after push/pull requests to the master branch, assuming all deployments would be from the master.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: subosito/flutter-action@v1
      with:
        channel: beta
    - run: flutter config --enable-web
    - run: flutter build web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the Flutter building process, I used an action made by subosito. You can check the &lt;a href=&quot;https://github.com/marketplace/actions/flutter-action&quot;&gt;Flutter Actions detail here&lt;/a&gt;. For Flutter web, we first have to initialize the configurations to enable web builds. Thus, we ran:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter config --enable-web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then if you want to add tests to the workflow, you can by adding the command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, build the app using:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter build web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The results of the build will be in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build/web&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v1.1
      with:
        publish-dir: './build/web'
        production-branch: master
        github-token: $
        deploy-message: &quot;Deploy from GitHub Actions&quot;
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: $
        NETLIFY_SITE_ID: $
      timeout-minutes: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After a successful build, deploy the files to Netlify manually. Here’s a snippet I used by nwtgck. I changed a few variables to be able to publish Flutter apps, but you can check &lt;a href=&quot;https://github.com/marketplace/actions/netlify-actions&quot;&gt;Netlify Actions here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this last workflow, you’ll access the secrets we previously stored on our repository settings. The entire workflow can be copied from this gist below:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: subosito/flutter-action@v1
      with:
        channel: beta
    - run: flutter config --enable-web
    - run: flutter build web

    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v1.1
      with:
        publish-dir: './build/web'
        production-branch: master
        github-token: $
        deploy-message: &quot;Deploy from GitHub Actions&quot;
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: $
        NETLIFY_SITE_ID: $
      timeout-minutes: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Your CI/CD workflow should be finished. Save the workflow inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt;, and try running it yourself! You can check the dummy site I deployed &lt;a href=&quot;https://miniature-flutter-milkstore.netlify.app/#/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;We’ve successfully created a CI/CD pipeline for Flutter web using Github Actions. To summarize our steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a blank Netlify site.&lt;/li&gt;
  &lt;li&gt;Retrieve the personal access token from Netlify and the site ID.&lt;/li&gt;
  &lt;li&gt;Retrieve the personal access token from GitHub.&lt;/li&gt;
  &lt;li&gt;Set the secrets inside the repository settings.&lt;/li&gt;
  &lt;li&gt;Create a GitHub Action YAML file inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Voila! We’ve finished our tutorial. Now you have an open playbook to deploy your future Flutter web apps using GitHub Actions.&lt;/p&gt;</content><author><name>Agustinus Theodorus</name></author><category term="tech" /><summary type="html">Lately, there has been a lot of fuss over Flutter. Some people call it the future, while some say it’s overrated. But I think it’s a good framework to learn nonetheless. The sheer amount of things that can be done with Flutter is unbelievable, including Android, iOS, desktop, and web programming.</summary></entry><entry><title type="html">Automate Your Linux Deployment Using Azure DevOps</title><link href="https://agustinustheo.github.io/tech/2020/12/10/automate-your-linux-deployment-using-azure-devops.html" rel="alternate" type="text/html" title="Automate Your Linux Deployment Using Azure DevOps" /><published>2020-12-10T19:49:28+07:00</published><updated>2020-12-10T19:49:28+07:00</updated><id>https://agustinustheo.github.io/tech/2020/12/10/automate-your-linux-deployment-using-azure-devops</id><content type="html" xml:base="https://agustinustheo.github.io/tech/2020/12/10/automate-your-linux-deployment-using-azure-devops.html">&lt;p&gt;Feel like you have been logging into your Linux servers too much lately? Good, this might be the right article for you. In teams, either large or small manual deployments can be tedious. But they are also predictable. Deployment steps don’t really change that often unless you have a breaking change or you are implementing a major feature.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*zCSfGwYvrx7hc3DY&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So, why don’t you just automate it? You don’t need to do it yourself. Do important things like &lt;strong&gt;writing code&lt;/strong&gt; and let a machine do the deployments for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If your team is blessed to use Azure DevOps here is a tutorial to finally automate &lt;strong&gt;&lt;em&gt;the hell&lt;/em&gt;&lt;/strong&gt; out of your deployments. You &lt;em&gt;seldom&lt;/em&gt; have to log on to your Linux servers again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this tutorial, we will be making an automated pipeline to deploy .NET Core applications to a Centos 8 server. The app will be run as a service and we will serve those services through a reverse proxy using NGINX.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;installing-azure-agent-onlinux&quot;&gt;Installing Azure Agent on Linux&lt;/h3&gt;

&lt;p&gt;In Azure DevOps, we use an agent to interact with our builds in the pipeline. Installing agents are straightforward, just follow these steps:&lt;/p&gt;

&lt;h4 id=&quot;1-setting-up-a-deployment-group-in-azuredevops&quot;&gt;1. Setting Up A Deployment Group in Azure DevOps&lt;/h4&gt;

&lt;p&gt;Deployment groups are the list of agents already installed on your servers. You would need to make a deployment group for each server.&lt;/p&gt;

&lt;p&gt;First, open your &lt;strong&gt;Azure DevOps&lt;/strong&gt; dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*diKrTk5BKavbs076x6AqNQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, open your &lt;strong&gt;Pipelines&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*RQiW01F5omxuvnAV&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;Deployment Groups&lt;/strong&gt;, and click &lt;strong&gt;New&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*wFxLJNCYSxD9PhN4&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Give your Linux VM an Alias, and the description. Then click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*dC9GLQyFwPz4sVprOJ4l-g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You have created a deployment group, now to install this deployment groups agent on your Linux server:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Change the target from Windows to &lt;strong&gt;Linux&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Check the &lt;strong&gt;Use a personal access token&lt;/strong&gt; checkbox.&lt;/li&gt;
  &lt;li&gt;Save the script on a notepad for the next step.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2-installing-the-agent-on-the-linuxserver&quot;&gt;2. Installing the Agent on the Linux Server&lt;/h4&gt;

&lt;p&gt;To install the agent, run the script copied from the previous step &lt;strong&gt;in the home directory&lt;/strong&gt;, make sure you &lt;strong&gt;run the script with a user that has sudo enabled&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After installation is finished run go into the &lt;strong&gt;azagent&lt;/strong&gt; directory and check the installation by trying to run the agent:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd azagent  
./run.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the agent returns a &lt;strong&gt;&lt;em&gt;Listening for Jobs&lt;/em&gt;&lt;/strong&gt; message, that means the installation was successful. The next step is to make a service that can run the agent in the background.&lt;/p&gt;

&lt;p&gt;To start to install the agent as a service, run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ./svc.sh install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will install the service, and then run it in the background. To stop the service run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ./svc.sh stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Otherwise, if we want to start an installed service, run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ./svc.sh start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*vkJRjhEYQVPeemFc&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check if the service is running by opening the Deployment Groups tab in Azure DevOps. If it is &lt;strong&gt;Online&lt;/strong&gt; then your agent installation is successful and it is available for jobs.&lt;/p&gt;

&lt;p&gt;This short installation guide was based on an article by &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/v2-linux?view=azure-devops&quot;&gt;Microsoft&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;configure-your-linux-server-for-automation&quot;&gt;Configure your Linux server for automation&lt;/h3&gt;

&lt;p&gt;Now, this would be the fun part. Microsoft already did all the heavy lifting with the boring installation things. Now it is our turn to automate things.&lt;/p&gt;

&lt;h4 id=&quot;1-make-a-script-to-automate-nginx-configurations&quot;&gt;1. Make a script to automate NGINX configurations&lt;/h4&gt;

&lt;p&gt;To add new NGINX configurations we will create a shell script, add this &lt;em&gt;add-nginx-conf.sh&lt;/em&gt; script on the home directory:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash
conf_path=&quot;/etc/nginx/conf.d/$1.conf&quot;

if [ -f &quot;$conf_path&quot; ]
then
    conf_text=`cat $conf_path`
    if [[ &quot;$conf_text&quot; == *&quot;$2&quot;* ]] || [[ &quot;$conf_text&quot; == *&quot;localhost:$3&quot;* ]]
    then
        echo &quot;Proxy route or localhost port has been used, please manually reconfigure your Nginx configuration.&quot;
    else
        word=&quot;\n\n\tlocation \/$2\/ {\
\n\t\tproxy_pass http:\/\/localhost:$3\/;\
\n\t}&quot;
        match=&quot;# Insert here&quot;
        echo &quot;$conf_text&quot; | sed &quot;s/$match/&amp;amp;$word/g&quot; &amp;gt; &quot;$conf_path&quot;
    fi

    nginx -t
    systemctl reload nginx
else
    conf_text=&quot;server {
	listen       80;
	listen       [::]:80;
	server_name  $1;

	# Load configuration files for the default server block.
	include /etc/nginx/default.d/*.conf;
	
	# Insert here

	location /$2/ {
		proxy_pass http://localhost:$3/;
	}

	error_page 404 /404.html;
		location = /40x.html {
	}

	error_page 500 502 503 504 /50x.html;
		location = /50x.html {
	}
}&quot;

    echo &quot;$conf_text&quot; &amp;gt; &quot;$conf_path&quot;

    chcon unconfined_u:object_r:httpd_config_t:s0 &quot;$conf_path&quot;
    chown root:root &quot;$conf_path&quot;

    nginx -t
    systemctl reload nginx
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This script will create a search for configuration files named using the associated DNS, it will create a new one if it was not found. Once found, the new configuration routes will be added there. Mind you, the configuration route in this script would be a basic proxy pass, you might want to add more configurations to the script if you want to use it for production.&lt;/p&gt;

&lt;p&gt;The shell script accepts three parameters. The DNS, proxy route, and the port being used:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ~/add-nginx-conf.sh &amp;lt;DNS&amp;gt; &amp;lt;proxy route&amp;gt; &amp;lt;app port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ~/add-nginx-conf.sh yourdomain.com enrichment_track 14321
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the script will add configurations for the yourdomain.com domain, with a reverse proxy to port 14321 in the enrichment_track.&lt;/p&gt;

&lt;h4 id=&quot;2-make-a-script-to-automate-system-service-configurations&quot;&gt;2. Make a script to automate system service configurations&lt;/h4&gt;

&lt;p&gt;To add new system service configurations we will create a shell script, add this &lt;em&gt;make-service.sh&lt;/em&gt; script on the home directory:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash
file_path=`pwd`
service_path=&quot;/etc/systemd/system/$1.service&quot;
if [ -f &quot;$service_path&quot; ]
then
    echo &quot;Service file already exists&quot;
else
    touch &quot;$service_path&quot;
    service_contents=&quot;[Unit]
Description=.NET Web API for $1

[Service]
WorkingDirectory=$file_path/_$1/drop/s
ExecStart=/usr/bin/dotnet $file_path/_$1/drop/s/$2.dll
Restart=always
# Restart service after 10 seconds if the dotnet service crashes:
RestartSec=10
KillSignal=SIGINT
SyslogIdentifier=dotnet-example
User=&amp;lt;user&amp;gt;
Environment=ASPNETCORE_ENVIRONMENT=&amp;lt;server environment&amp;gt;
Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false

[Install]
WantedBy=multi-user.target&quot;
    echo &quot;$service_contents&quot; &amp;gt;&amp;gt; &quot;$service_path&quot;
    systemctl start $1.service
    systemctl enable $1.service
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Before you copy and paste the code, notice the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;user&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;server environment&amp;gt;&lt;/code&gt; tags in the script. Please change it to your corresponding user and server environment beforehand. Server environments in this case would be either Development or Production.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The script will generate new systemd service files that would run .NET Core projects. To generate scripts for other types of applications you would want to change the given template.&lt;/p&gt;

&lt;p&gt;The shell script accepts two parameters. The service name, and the project name used:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ~/make-service.sh &amp;lt;service name&amp;gt; &amp;lt;project name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ~/make-service.sh CI-Build API-Project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the script will add a new system service file &lt;em&gt;CI-Build.service&lt;/em&gt;, that runs a dll file named &lt;em&gt;API-Project.dll&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;3-setup-a-user-to-run-systemctl-and-nginx-commands-without-passwordprompts&quot;&gt;3. Setup a user to run systemctl and Nginx commands without password prompts&lt;/h4&gt;

&lt;p&gt;For automation purposes, the user that you used to install your Azure Agent needs to be able to run systemctl and Nginx commands without a password prompt. To remove the password prompts on sudo run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo visudo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need to run all the commands in the script using sudo without having a password being prompted. So, we make exceptions for those commands, and the corresponding scripts we are going to use.&lt;/p&gt;

&lt;p&gt;Then add this on the last line &lt;em&gt;(change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;user&amp;gt;&lt;/code&gt; tag beforehand)&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;user&amp;gt; ALL=(ALL) NOPASSWD:/usr/bin/systemctl, /usr/sbin/nginx, /usr/bin/chcon, /usr/bin/chown, /usr/bin/echo, /usr/bin/touch, /usr/bin/sed, /home/&amp;lt;user&amp;gt;/make-service.sh, /home/&amp;lt;user&amp;gt;/add-nginx-conf.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Exit and save the config file, then try running one of these commands using sudo. You should not be prompted for a password.&lt;/p&gt;

&lt;p&gt;A full explanation on how to run a sudo command without a password can be seen &lt;a href=&quot;https://www.cyberciti.biz/faq/linux-unix-running-sudo-command-without-a-password/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;prepare-the-pipelines&quot;&gt;Prepare the Pipelines&lt;/h3&gt;

&lt;h4 id=&quot;prepare-the-cipipeline&quot;&gt;Prepare the CI Pipeline&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*fRlXDaaNIGDMUXlx8ER1gg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, we are going to use a .NET Core app as our example.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, go to the Pipelines tab.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;New Pipeline&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*lwYKW8-orAtqp1xr&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use the classic editor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*w9fgiTigSL8dU4Pu&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Choose a repository and click &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*j8MZijq5kfQ3gFyo&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apply the .NET Core template.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Search for &lt;strong&gt;“.NET Core”&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Then apply the template&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*aJDSwZlIsa-uVRjl&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because we are deploying a very small example app, I didn’t prepare any tests so:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the Test task.&lt;/li&gt;
  &lt;li&gt;Remove the task.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Otherwise, if you are using tests, then don’t remove this task.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*i2vTHkZzgc3RK2Op&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, this is what you are left with. In the next step, we will implement Continuous Development in our solution.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Change the name of your CI pipeline.&lt;/li&gt;
  &lt;li&gt;Save the Pipeline.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;prepare-the-cdpipeline&quot;&gt;Prepare the CD Pipeline&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*j4Oyuueu6v8jcAa-&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To add a new Continuous Development pipeline:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to the &lt;strong&gt;Releases&lt;/strong&gt; tab.&lt;/li&gt;
  &lt;li&gt;Click the &lt;strong&gt;New&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Then click &lt;strong&gt;New release pipeline&lt;/strong&gt; to create a new pipeline.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*PksyAUqhU2tdHkTW&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking the &lt;strong&gt;New release pipeline&lt;/strong&gt; button a pop-up will appear, then select &lt;strong&gt;Empty Job&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*B8Sh7jl3MZJ4qtF1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To connect to a CI pipeline:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click &lt;strong&gt;Add a new artifact&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Choose the project that contains the CI pipeline.&lt;/li&gt;
  &lt;li&gt;Choose the CI pipeline.&lt;/li&gt;
  &lt;li&gt;Give an alias to your artifact.&lt;/li&gt;
  &lt;li&gt;When all is done click &lt;strong&gt;Add&lt;/strong&gt; to finish the configuration.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*38Fjnw3zUuPhvji9&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then for the Continuous Deployment pipeline:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the thunderbolt icon.&lt;/li&gt;
  &lt;li&gt;Then check the &lt;strong&gt;Enabled&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*0iqhBSovBPD7xVpL&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After creating a stage, on &lt;strong&gt;stages&lt;/strong&gt;, double click on tasks to go to the &lt;strong&gt;Tasks&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*ojZ6-NrtHwo0Aeie&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the tasks section, make a deployment group job.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the three dots to show options.&lt;/li&gt;
  &lt;li&gt;Add a deployment group job.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*FyUB5L1Iei_pTuQN&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Choose the Linux deployment group we made on &lt;a href=&quot;https://docs.google.com/document/d/1KauINvdb7BFPz9pdlGhwGw93Jj7unkbnTNWAXrstOeg/edit#heading=h.n6j71fd5yi6b&quot;&gt;this step&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*3XuKy89xJJyYXec8&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add a task to the deployment job.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To add a new task click the &lt;strong&gt;+&lt;/strong&gt; sign.&lt;/li&gt;
  &lt;li&gt;Then search for &lt;strong&gt;Download build artifacts&lt;/strong&gt;. This task is to download artifacts from the CI pipeline to the Linux VM.&lt;/li&gt;
  &lt;li&gt;Finally, &lt;strong&gt;Add&lt;/strong&gt; the task.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*7r1MUEHrP4G5AbB_&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next is to configure your Download Build Artifacts job. Follow these 6 steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the &lt;strong&gt;Download Build Artifacts&lt;/strong&gt; task.&lt;/li&gt;
  &lt;li&gt;Choose to download artifacts by &lt;strong&gt;Specific Build&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Define your Azure DevOps project&lt;/li&gt;
  &lt;li&gt;Define your CI pipeline.&lt;/li&gt;
  &lt;li&gt;Check the &lt;strong&gt;When appropriate download artifacts from the triggering build&lt;/strong&gt; checkbox to trigger a download only after the build is finished.&lt;/li&gt;
  &lt;li&gt;As for the download, type choose &lt;strong&gt;Specific files&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*Y5iGYaSEcE2O1u1y&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then search for the &lt;strong&gt;Command line&lt;/strong&gt; task:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new task by clicking the &lt;strong&gt;+&lt;/strong&gt; button.&lt;/li&gt;
  &lt;li&gt;Search for &lt;strong&gt;“command”&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Add&lt;/strong&gt; to add a new task to the existing job.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*EWRJZrvelnFdQywZNAAxJA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then in the command line, paste in the script you will be running:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the &lt;strong&gt;appsettings.json&lt;/strong&gt; file from the home directory to the build folder.&lt;/li&gt;
  &lt;li&gt;Generate system service configuration files and start &lt;strong&gt;if not exist&lt;/strong&gt; using the &lt;em&gt;make-service.sh&lt;/em&gt; script.&lt;/li&gt;
  &lt;li&gt;Restart the service for the .NET Core project.&lt;/li&gt;
  &lt;li&gt;Add NGINX configuration &lt;strong&gt;if not exist&lt;/strong&gt; using the &lt;em&gt;add-nginx-conf.sh&lt;/em&gt; script.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Notice in the command line, there are tags like &lt;strong&gt;$(Build.DefinitionName)&lt;/strong&gt;. This is one of Azure Pipeline’s pre-defined variables you can learn more about it &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;amp;tabs=yaml&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*sxB70Pit7xBQICV3&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you’re done with the configuration, save your Release pipeline:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Change the name of the Pipeline&lt;/li&gt;
  &lt;li&gt;Save the pipeline.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;testing-thepipeline&quot;&gt;Testing the pipeline&lt;/h3&gt;

&lt;p&gt;To test the pipeline, go to the Pipelines section, open the pipeline you just created, and click &lt;strong&gt;Run Pipeline&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*ulEJaZGiPYdzOIEoOt8iWw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We run it from the CI pipeline because both CI and CD pipelines are already connected.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this tutorial, you have learned how to automate CI/CD deployments using Azure DevOps and some shell scripts. We tested it out using a .NET Core project. The Linux server used was a Centos 8.&lt;/p&gt;

&lt;p&gt;To recap what we have done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Installed an Azure Agent on Linux.&lt;/li&gt;
  &lt;li&gt;Configured our Linux server for automation.&lt;/li&gt;
  &lt;li&gt;Prepared the CI/CD Pipelines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You now have an open playbook to use when you want to automate deployments. Hope this tutorial was of help and have a nice day!&lt;/p&gt;</content><author><name>Agustinus Theodorus</name></author><category term="tech" /><summary type="html">Feel like you have been logging into your Linux servers too much lately? Good, this might be the right article for you. In teams, either large or small manual deployments can be tedious. But they are also predictable. Deployment steps don’t really change that often unless you have a breaking change or you are implementing a major feature.</summary></entry><entry><title type="html">How To Choose Your First Techstack</title><link href="https://agustinustheo.github.io/tech/2020/11/18/how-to-choose-your-first-techstack.html" rel="alternate" type="text/html" title="How To Choose Your First Techstack" /><published>2020-11-18T20:01:31+07:00</published><updated>2020-11-18T20:01:31+07:00</updated><id>https://agustinustheo.github.io/tech/2020/11/18/how-to-choose-your-first-techstack</id><content type="html" xml:base="https://agustinustheo.github.io/tech/2020/11/18/how-to-choose-your-first-techstack.html">&lt;p&gt;For all these years in the tech industry. I assure you that I have had my fair share of technology. A multitude of different frameworks aiming to achieve the same thing with their own different takes. Teams that prefer different tech stacks. It doesn’t matter what you learn but how fast can you adapt.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*9RPiaNqFjBvZay_Q&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this article, I might not give you &lt;strong&gt;exact&lt;/strong&gt; answers to what you should choose. Because I believe that you should find what is comfortable for yourself. I would just explain what my ideas were when I chose my stack.&lt;/p&gt;

&lt;h3 id=&quot;the-jobstack&quot;&gt;The Job Stack&lt;/h3&gt;

&lt;p&gt;When you first started working as a software engineer, you would realize that you can’t decide what tech stack your company would use, initially. You would need a lot more rep and power to be making those decisions.&lt;/p&gt;

&lt;p&gt;So, there you are stuck with a legacy system using &lt;a href=&quot;https://winworldpc.com/product/microsoft-visual-bas/60&quot;&gt;VB 6.0&lt;/a&gt;. Probably that shouldn’t be your choice. If you have ever used &lt;a href=&quot;https://winworldpc.com/product/microsoft-visual-bas/60&quot;&gt;VB 6.0&lt;/a&gt; damn, how programming has improved over the years. No, this is not an endorsement for &lt;a href=&quot;https://winworldpc.com/product/microsoft-visual-bas/60&quot;&gt;VB 6.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my company, we mainly use C# and PHP. I was mentored using C# and &lt;a href=&quot;https://dotnet.microsoft.com/apps/aspnet/mvc&quot;&gt;ASP.NET MVC&lt;/a&gt; when I was first starting, then continued to use PHP and CodeIgniter in my second year. So the choices were between these two.&lt;/p&gt;

&lt;p&gt;I chose C#. Why? Well here comes the subjective part. PHP is not a language for me. It is too flexible and there are too many syntaxes that do the same thing. My experience was with PHP5, now it’s with PHP7 things have improved but I have already invested more time on C#.&lt;/p&gt;

&lt;p&gt;The point here is that you can choose to deepen your skill in a modern language used by your current employer. It would be easier and you can suggest implementations of some cool stuff using your employer’s language of choice.&lt;/p&gt;

&lt;p&gt;For example, recently when being tasked with making a multithreaded background service. Using C# and &lt;a href=&quot;https://dotnet.microsoft.com/download&quot;&gt;.NET Core&lt;/a&gt; really helped me craft a perfect solution for my employer.&lt;/p&gt;

&lt;p&gt;The best part is not the solution, the best part would be the fact that anyone in your team can maintain your application. Collaboration would be easy because the language used is universally understood by engineers in your company.&lt;/p&gt;

&lt;p&gt;The only downside would be the lack of freedom. You can’t force your will upon your employer, and if you try to master a different language, you end up learning 2 things at the same time. It depends on you personally but I would prefer to avoid that.&lt;/p&gt;

&lt;h3 id=&quot;the-swiss-armystack&quot;&gt;The Swiss Army Stack&lt;/h3&gt;

&lt;p&gt;Ooh, swiss army stack! That sounds cool, doesn’t it?&lt;/p&gt;

&lt;p&gt;This particular stack consists of mainly one language with multiple different frameworks for different situations. A good example here would be the Javascript/&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;NodeJS&lt;/a&gt; ecosystem.&lt;/p&gt;

&lt;h4 id=&quot;javascript&quot;&gt;Javascript&lt;/h4&gt;

&lt;p&gt;Who here doesn’t know NodeJS? Look it up.&lt;/p&gt;

&lt;p&gt;Using a front-end framework like &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt;, or &lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular&lt;/a&gt; has been the norm. They all use Javascript/&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;Typescript&lt;/a&gt;. So why bother learning a different language other than Javascript? Just use &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; for the backend and your all set. Fullstack Javascript here we go.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hey, do you know Javascript can do AI too? It can, there is a library called &lt;a href=&quot;https://www.tensorflow.org/js&quot;&gt;Tensorflow.js&lt;/a&gt;. Now don’t tell me that isn’t amazing?!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To be clear, I am not advocating for Javascript. It is just one of those languages that have a lot of functionality. Another example would be Python, and probably &lt;a href=&quot;https://dart.dev/&quot;&gt;Dart&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;python&quot;&gt;Python&lt;/h4&gt;

&lt;p&gt;I don’t know about you, but Python is still looking hot nowadays. It still hasn’t lost it’s easy to use appeal. You can make a ton of things with Python, web applications, APIs, AI applications, background services, etc.&lt;/p&gt;

&lt;p&gt;As far as I know, the Javascript ecosystem’s AI libraries aren’t as mature as Python. Python is the main go-to language for AI. Youtube AI programming tutorials usually are done using Python. Some exceptions are using Javascript but my argument still stands.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But Python does suck at frontend programming. Javascript beat Python in GUI building by a longshot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;dart&quot;&gt;Dart&lt;/h4&gt;

&lt;p&gt;Honestly, this should be an honorable mention. But because the environment is quite interesting and has some potential, I thought I would bring it to light.&lt;/p&gt;

&lt;p&gt;So, the main powerhouse behind &lt;a href=&quot;https://dart.dev/&quot;&gt;Dart&lt;/a&gt; is Google’s &lt;a href=&quot;https://flutter.dev/&quot;&gt;Flutter&lt;/a&gt;. The prospect of a multiplatform frontend framework for Desktop, Mobile, and Web is very promising, to say the least.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sure, Javascript has a multiplatform framework. There’s &lt;a href=&quot;https://reactnative.dev/&quot;&gt;React Native&lt;/a&gt;. But it’s only for &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;. So, mobile and web. How about &lt;a href=&quot;https://www.electronjs.org/&quot;&gt;Electron.js&lt;/a&gt;? Sure it would work for Desktop. But &lt;a href=&quot;https://flutter.dev/&quot;&gt;Flutter&lt;/a&gt; alone compasses all three.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Backend though. It isn’t as promising. The only backend framework I know that uses Dart is probably &lt;a href=&quot;https://aqueduct.io/&quot;&gt;Aqueduct&lt;/a&gt;. Though to be honest, I haven’t had time to research that. So I don’t know if it is already production-ready.&lt;/p&gt;

&lt;p&gt;Out of the three languages, I would say Dart is the least mature tech stack. An immature tech stack can bring opportunities for new developers to contribute to the open-source ecosystem, but the downside would be very unstable ecosystem wise.&lt;/p&gt;

&lt;h3 id=&quot;the-maturestack&quot;&gt;The Mature Stack&lt;/h3&gt;

&lt;p&gt;Mature by what definition? These tech stacks have been around for a while. Has been battle-tested and many applications are using them.&lt;/p&gt;

&lt;p&gt;For example, in the case of web frameworks, a mature framework would be C#’s ASP.NET, Java’s Spring, Python’s Django, PHP’s CodeIgniter, Symfony, and Ruby on Rails. These are some of the oldest tech stacks, developed between 2002–2006. Many corporate applications use these frameworks.&lt;/p&gt;

&lt;p&gt;Being knowledgeable about these tech stacks are only good if you want to join large corporations. New startups have a very different tech stack, not because these frameworks are bad. But because there exist more production-ready options today.&lt;/p&gt;

&lt;p&gt;I personally have tried 3 of the previously mentioned frameworks. ASP.NET, Django, and Ruby on Rails. &lt;strong&gt;My favorite was Ruby on Rails&lt;/strong&gt;. Django was always too complicated for me, I prefer to use Flask for Python web development. It’s hard to host ASP.NET applications on Linux so I also passed on that.&lt;/p&gt;

&lt;h3 id=&quot;so-which-should-ichoose&quot;&gt;So, which should I choose?&lt;/h3&gt;

&lt;p&gt;Now, this is where it gets opinionated.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Take this with a grain of salt, try it out yourself. There are many more technologies available than what I have written here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you dislike your job stack, well you can use it for professional purposes only, and try to find another job with a tech stack you like. Nothing you can do about it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;My simple guide would be to master one object-oriented language and one scripting language, and if you’re lucky both of them would be multiplatform.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I on the other hand love C# and .NET Core, so it has not been a problem for me. I prefer it over Java because C# libraries are helpful and are already all too familiar to me. .NET Core is also multiplatform, and unlike previous ASP.NET releases, it runs seamlessly on Linux.&lt;/p&gt;

&lt;p&gt;My scripting language of choice would be Python. Writing in Python has been so wonderfully easy. I am very comfortable with the amount of flexibility the language gives me. The libraries are also mature and because I have an obsession with AI, implementing an AI model in a web application is seamless.&lt;/p&gt;

&lt;p&gt;Seeing my choices you might be wondering. “Hmm, so C# and Python. Aren’t both of them backend languages?”, and you are right. Well, apart from C# Blazor. But I don’t use Blazor that much so I’ll turn a blind eye to that.&lt;/p&gt;

&lt;p&gt;For front-end purposes, I use Javascript frameworks. This limits my capabilities to pure web applications because Javascript frameworks are mostly well known for its front-end web frameworks. But another benefit of learning Javascript is that it is an in-demand skill. Javascript can have production-ready environments for both front-end and back-end most companies take advantage of that.&lt;/p&gt;

&lt;p&gt;Furthermore, Javascript has another benefit of being &lt;strong&gt;a free tech stack&lt;/strong&gt;. Here’s what I mean. There is a service called &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;. Netlify hosts JAM Stack applications, and if you have reasonably small traffic, Netlify covers the costs for free. JAM stands for Javascript, APIs, Markup. Add to that Netlify also has a service called &lt;a href=&quot;https://www.netlify.com/products/functions/&quot;&gt;Netlify Functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*Sjwe6yN2B25zJI91MAqMmA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Netlify Functions utilize serverless technologies to make simple APIs using Javascript using &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; as their base. You are only charged after 125k~ requests or so.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*wl90hwJrFDI7-UW1jHQfjQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My next statement might sound controversial, but in my opinion, adding Javascript to your knowledge repository can help you get a job. It is very popular and very flexible. Being multiplatform it is cost-effective and the choice of many modern startups. Some corporations are also planning to migrate to Javascript environments.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So? Found your calling yet? Don’t rush. It’s fine. Do what you think is right. If you want to learn them all, be my guest. I am already at a stage where I want to master concepts rather than frameworks so I can say I understand how it feels. Be slow but sure, you won’t master it all overnight.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The master has failed more times than the beginner has even tried.” — &lt;a href=&quot;https://www.goodreads.com/quotes/1252243-the-master-has-failed-more-times-than-the-beginner-has&quot;&gt;Stephen McCranie&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don’t be afraid to try. Failure is only a step. Thank you and have a nice day!&lt;/p&gt;</content><author><name>Agustinus Theodorus</name></author><category term="tech" /><summary type="html">For all these years in the tech industry. I assure you that I have had my fair share of technology. A multitude of different frameworks aiming to achieve the same thing with their own different takes. Teams that prefer different tech stacks. It doesn’t matter what you learn but how fast can you adapt.</summary></entry><entry><title type="html">How To Host Flutter Web In Linux Using Nginx</title><link href="https://agustinustheo.github.io/tech/2020/11/09/how-to-host-flutter-using-nginx.html" rel="alternate" type="text/html" title="How To Host Flutter Web In Linux Using Nginx" /><published>2020-11-09T05:02:42+07:00</published><updated>2020-11-09T05:02:42+07:00</updated><id>https://agustinustheo.github.io/tech/2020/11/09/how-to-host-flutter-using-nginx</id><content type="html" xml:base="https://agustinustheo.github.io/tech/2020/11/09/how-to-host-flutter-using-nginx.html">&lt;p&gt;Thinking of making a web app? I recommend you try Flutter. Flutter’s web capabilities are still in beta but it’s quite promising, to say the least. I have experienced first hand how quick it is to build UIs using Flutter and I think it could soon be a competitive alternative to the Javascript ecosystem such as React, Vue, and Angular.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*4HwhJBcQU5Fcjv2U&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So to help out the future Flutter community members, a tutorial on how to host your Flutter web app on a DIY private server would help. As a healthy alternative to Firebase.&lt;/p&gt;

&lt;h3 id=&quot;what-would-youneed&quot;&gt;What would you need?&lt;/h3&gt;

&lt;h4 id=&quot;umm-first-of-all-a-privateserver&quot;&gt;Umm, first of all, a private server.&lt;/h4&gt;

&lt;p&gt;With serverless capabilities nowadays it is no wonder that people prefer Firebase, it’s free and it’s painless. Obvious choice.&lt;/p&gt;

&lt;p&gt;But what if we want to go independent? Away from the norms? Well, you have to learn it all yourself. Because we are using Nginx, then the server must be a Linux server, not a Windows server.&lt;/p&gt;

&lt;p&gt;Assuming you use a Debian/Ubuntu-based Linux distro. Here’s a starter script to help you get started.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update  
sudo apt install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There, I just saved you some googling time. If you want an in-depth guide on Nginx, I suggest you read &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04&quot;&gt;this post by Digital Ocean&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;do-we-need-to-install-the-flutter-sdk-on-ourserver&quot;&gt;Do we need to install the Flutter SDK on our server?&lt;/h4&gt;

&lt;p&gt;Umm, yes, and no.&lt;/p&gt;

&lt;p&gt;Let me elaborate. It is possible to install the SDK, but why do you need exactly? Installing the SDK helps you to test quick changes to the code on the server to try to fix a few production-related bugs like a cowboy!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/600/0*chBNVmBfQ2j2KpyA.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I won’t do it though because SDKs consumes a lot of memory and requires a lot of RAM to be compiled. Your private server might not have enough RAM to process it. Believe me, I’ve tried. My VPS only had around 400MB of RAM enough to run a small app but not enough to compile the SDK. &lt;strong&gt;So I didn’t install it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So this just leaves one option either you use CI/CD to deploy your Flutter app to your VPS or just use plain old git. By using Git I mean by pushing your builds to the repository. This might not be a best practice for some teams as the entire software world almost unilaterally agree on using CI/CD, but hey — a cowboy’s gotta do what a cowboy’s gotta do.&lt;/p&gt;

&lt;p&gt;I am not going into how much of a best practice this tutorial is going to be rather how simple and understandable it is. So let me just leave this choice to you.&lt;/p&gt;

&lt;h4 id=&quot;do-i-need-adomain&quot;&gt;Do I need a domain?&lt;/h4&gt;

&lt;p&gt;Do you need a domain? No. It is not required because we are learning &lt;strong&gt;how to host a Flutter web app using Nginx&lt;/strong&gt; using a domain or not is not of this tutorial’s concern.&lt;/p&gt;

&lt;h3 id=&quot;build-yourapp&quot;&gt;Build your app&lt;/h3&gt;

&lt;p&gt;After your app has been tested, run the Flutter build command.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter build web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That should generate a build folder within your project structure. Within the build folder, there is another folder named &lt;strong&gt;web&lt;/strong&gt; which contains the essential files to be used for hosting.&lt;/p&gt;

&lt;p&gt;The web directory should contain a file named &lt;strong&gt;index.html&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;configure-nginx&quot;&gt;Configure Nginx&lt;/h3&gt;

&lt;p&gt;Here come’s the fun part. Now copy that web directory to your VPS in any fashion you would want. Then make sure you move the build files to /var/www/html.&lt;/p&gt;

&lt;p&gt;Let’s say your application name is &lt;strong&gt;todos&lt;/strong&gt; so a good folder naming convention would be /var/www/html/todos. Inside the todos directory is the build files, &lt;strong&gt;index.html,&lt;/strong&gt; etc. If you’re not familiar with Linux commands this should help, assuming that your build files are in your home directory.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mv web /var/www/html/todos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, you need to go to the Nginx directory on your server more precisely /etc/nginx/sites-enabled. There should be a file named &lt;strong&gt;default&lt;/strong&gt;. Open it using a vim/nano text editor of your choice and change the root directory on the configuration file to /var/www/html/todos.&lt;/p&gt;

&lt;h4 id=&quot;no-domainsetup&quot;&gt;No Domain Setup&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Default server configuration
server {
       listen 80 default_server;
       listen [::]:80 default_server;

       root /var/www/html/todos;
       index index.html index.htm;

       server_name _;

       location / {
              try_files $uri $uri/ =404;
       }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is an example. The original file should be filled with comments, but I left those comments out in the gist. After changing your config files, check your Nginx config using this command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nginx -t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If all is well, then restart the Nginx service:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl reload nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should restart your Nginx server and get the updated config file. When all is done open up your VPS IP Address from the browser. Your Flutter app should already be up.&lt;/p&gt;

&lt;p&gt;I prefer people access my app by domain so I’ll include how to set up the app using a domain here too.&lt;/p&gt;

&lt;h4 id=&quot;domain-setup&quot;&gt;Domain Setup&lt;/h4&gt;

&lt;p&gt;When you don’t want to use a domain, changing the &lt;strong&gt;default&lt;/strong&gt; file should be fine (even though some people prefer to leave the default as-is and create a new one).&lt;/p&gt;

&lt;p&gt;But when you want to use a domain, make sure you make a new configuration file. The file should have a .conf extension.&lt;/p&gt;

&lt;p&gt;I have attached the corresponding gist. The setup should be similar to the previous one with a difference in the server_name. Then before you open your app from the browser, run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nginx -t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If configuration health checks pass, reload the Nginx service.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl reload nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After restarting Nginx, try to open your domain from your browser. It should be done by then.&lt;/p&gt;

&lt;h3 id=&quot;further-note&quot;&gt;Further Note&lt;/h3&gt;

&lt;h4 id=&quot;dont-forget-to-update-domain-nameservers&quot;&gt;Don’t forget to update domain nameservers&lt;/h4&gt;

&lt;p&gt;When you want to use a domain, please make sure you point your domain nameservers to your VPS. You are required to do this before any further configuration is to be done.&lt;/p&gt;

&lt;h4 id=&quot;install-an-ssl-certificate-usingcertbot&quot;&gt;Install an SSL certificate using Certbot&lt;/h4&gt;

&lt;p&gt;There’s a technology called Let’s Encrypt. It gives you free SSL certificates to be used for your apps, securing your app, and adding HTTPS to your domain. Install Certbot for Nginx using this command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install python-certbot-nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, install SSL certificates on your domains:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo certbot --nginx -d your\_domain -d www.your\_domain
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this tutorial, you have learned how to serve a Flutter application using Nginx. You now have an open playbook to use when you want to deploy Flutter web applications using Nginx on your own server. Hope this tutorial was of help and have a nice day!&lt;/p&gt;</content><author><name>Agustinus Theodorus</name></author><category term="tech" /><summary type="html">Thinking of making a web app? I recommend you try Flutter. Flutter’s web capabilities are still in beta but it’s quite promising, to say the least. I have experienced first hand how quick it is to build UIs using Flutter and I think it could soon be a competitive alternative to the Javascript ecosystem such as React, Vue, and Angular.</summary></entry><entry><title type="html">How To Make Scalable APIs Using Flask and FaunaDB</title><link href="https://agustinustheo.github.io/tech/2020/10/28/how-to-make-scalable-apis-using-flask-and-faunadb.html" rel="alternate" type="text/html" title="How To Make Scalable APIs Using Flask and FaunaDB" /><published>2020-10-28T06:50:13+07:00</published><updated>2020-10-28T06:50:13+07:00</updated><id>https://agustinustheo.github.io/tech/2020/10/28/how-to-make-scalable-apis-using-flask-and-faunadb</id><content type="html" xml:base="https://agustinustheo.github.io/tech/2020/10/28/how-to-make-scalable-apis-using-flask-and-faunadb.html">&lt;p&gt;With the rise of serverless technology, making web services only gets easier. Serverless apps change the old monolithic architecture of apps and promote more of a microservice solution to technical problems.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*DuZ_NXbhwmAfiMPM&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the advantage of autoscaling, and multi-region deployments it is no wonder that serverless apps are making a quick rise in recent years. The cost of serverless has also redefined how we make software as it is now on a per request basis rather than a time-based service.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Even better, serverless also enables small services to be free altogether. Only being needed to be paid after a million requests or so. &lt;a href=&quot;https://azure.microsoft.com/en-us/pricing/details/functions/#:~:text=Azure%20Functions%20consumption%20plan%20is,function%20apps%20in%20that%20subscription.&quot;&gt;An example would be Azure Function’s consumption plan&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;what-does-serverless-have-to-do-with-this-tutorial&quot;&gt;What does Serverless have to do with this tutorial?&lt;/h3&gt;

&lt;p&gt;The main reason serverless is being mentioned here is because &lt;a href=&quot;https://fauna.com/features&quot;&gt;FaunaDB&lt;/a&gt; is a NoSQL database that is made for serverless in mind. The pricing on this database is request based, precisely what serverless apps need.&lt;/p&gt;

&lt;p&gt;Using a service like FaunaDB can help cut costs so much that the hosting capabilities of the app would be virtually free. Excluding the development costs of course. Thus, using a monthly billed database for serverless apps kind of kills the point.&lt;/p&gt;

&lt;p&gt;A free stack example would be a combination of Netlify, Netlify Functions, and FaunaDB. Though it would only be ‘free’ for a certain amount of requests. Unless you are making an app that gets thousands of users on day zero of deployment I don’t think it would be much of a problem.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In my opinion, using a monthly billed database for serverless apps kind of kills the point&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Flask on the other hand is a microframework written in Python. It is a minimalistic framework with no database abstraction layers, form validation, or any other particular functions provided by other frameworks.&lt;/p&gt;

&lt;p&gt;Flask is by large serverless compatible. You can make a serverless Flask app using AWS Lambda. &lt;a href=&quot;https://www.serverless.com/flask&quot;&gt;Here is an official guide to Flask serverless from serverless.com&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;

&lt;h4 id=&quot;setting-up-python-andpip&quot;&gt;Setting up Python and Pip&lt;/h4&gt;

&lt;p&gt;First of all, install Python and Pip. I’m not going to list all the possible ways of installing it, for Windows users you can get the installer &lt;a href=&quot;https://www.python.org/downloads/windows/&quot;&gt;here&lt;/a&gt;. As for Linux users if you are using a Debian/Ubuntu-based distro open your command prompt and install python and pip like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update  
sudo apt install python3 python3-pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To check if the installation is correct try executing these commands:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python --version  
pip --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The version numbers would then show for the corresponding commands.&lt;/p&gt;

&lt;h4 id=&quot;installing-dependencies&quot;&gt;Installing dependencies&lt;/h4&gt;

&lt;p&gt;After the environment setup is complete, the next step would be to install Flask itself. The installation process is simple just enter:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install Flask
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, install the python driver for FaunaDB:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install faunadb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Voila!&lt;/em&gt; You’re all set!&lt;/p&gt;

&lt;h3 id=&quot;making-a-to-do-listapp&quot;&gt;Making a To-Do List App&lt;/h3&gt;

&lt;p&gt;Now we are going to make an example app with the &lt;strong&gt;mother&lt;/strong&gt; of all app ideas, the to-do list app.&lt;/p&gt;

&lt;h4 id=&quot;to-do-listtemplate&quot;&gt;To-Do List Template&lt;/h4&gt;

&lt;p&gt;For this example, because we will be focusing mainly on how to make the API we will be using the &lt;a href=&quot;https://www.w3schools.com/howto/howto_js_todolist.asp&quot;&gt;W3School template&lt;/a&gt; for the to-do list app frontend.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*vd-pu5pZaaHq0pSjp39meQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;basic-project-structure&quot;&gt;Basic Project Structure&lt;/h4&gt;

&lt;p&gt;Our project would be an implementation of a helper pattern. A simple outline of our project would be like so:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\-
 |--app.py   
 |  
 |--services  
    |--todo_service.py  
 |--helpers  
    |--todo_helper.py  
 |--entities  
    |--faunadb_entity.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;faunadb-indexes&quot;&gt;FaunaDB Indexes&lt;/h3&gt;

&lt;h4 id=&quot;wait-what-areindexes&quot;&gt;Wait, what are indexes?&lt;/h4&gt;

&lt;p&gt;Indexes are how you make ‘where’ statements in FaunaDB. It allows you to get specific documents based on the field values.&lt;/p&gt;

&lt;p&gt;To create a new Index, just go to the Indexes section on your database and click &lt;strong&gt;New Index&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*o7EBsxeVx6QtvRmq4s0fLA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When creating an Index, choose the collection you would want to interact with. Then define the field name you want to search by. Lastly, define your index name make sure it is unique and readable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*LoR_MqlQX_is-ZtnAvDxCw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For example, let’s make an index where we can get all the data in an existing collection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*nOsbTxZXiyhH11zB-0qH_g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oh, what about an index to get todos by the user’s email? Easy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*yWe7e6e0TlskA2NUrGI3GQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to make the terms unique, check the Unique checkbox to add a constraint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*DCaHNlv3bdj8WDIpb7IYcw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To add constraints to a certain collection you need to create indexes with terms that contain unique fields.&lt;/p&gt;

&lt;p&gt;To help you understand better, &lt;a href=&quot;https://docs.fauna.com/fauna/current/tutorials/indexes/index.html&quot;&gt;here is an official article from Fauna to help you understand indexes.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;lets-make-theapi&quot;&gt;Let’s Make The API&lt;/h3&gt;

&lt;h4 id=&quot;make-the-flask-startupfile&quot;&gt;Make the Flask startup file&lt;/h4&gt;

&lt;p&gt;First, write a python file that would run Flask.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from flask import Flask

app = Flask(__name__)

if __name__ == &quot;__main__&quot;:
    app.run(host='0.0.0.0')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;write-the-faunadb-entityscript&quot;&gt;Write the FaunaDB entity script&lt;/h4&gt;

&lt;p&gt;Next, before we start writing our services and helpers we must first define an entity file to connect to FaunaDB.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import os
from faunadb import query as q
from faunadb.objects import Ref
from faunadb.client import FaunaClient

def get(index, data):
    try:
        serverClient = FaunaClient(secret=os.environ.get(&quot;FAUNA_SERVER_SECRET&quot;))
        res = serverClient.query(q.get(q.match(q.index(index), data)))
        res[&quot;data&quot;][&quot;ref_id&quot;] = res[&quot;ref&quot;].id()
        return res[&quot;data&quot;]
    except Exception as ex:
        raise ex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is used to get a FaunaDB document by Index. The get function does not return multiple documents and is only able to return a single document at a time.&lt;/p&gt;

&lt;p&gt;To get multiple documents we need to use a map function to return multiple data by a certain index.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def get_multiple(index, data=None):
    try:
        serverClient = FaunaClient(secret=os.environ.get(&quot;FAUNA_SERVER_SECRET&quot;))
        res_arr = []
        if data is None:
            res = serverClient.query(   
                q.map_(
                    q.lambda_(&quot;data&quot;, q.get(q.var(&quot;data&quot;))), 
                    q.paginate(q.match(q.index(index)))
                )
            )
            res_arr.extend(res[&quot;data&quot;])
        elif isinstance(data, list):
            for x in data:
                res = serverClient.query(   
                    q.map_(
                        q.lambda_(&quot;data&quot;, q.get(q.var(&quot;data&quot;))), 
                        q.paginate(q.match(q.index(index), q.casefold(x)))
                    )
                )
                res_arr.extend(res[&quot;data&quot;])
        else:
            res = serverClient.query(   
                q.map_(
                    q.lambda_(&quot;data&quot;, q.get(q.var(&quot;data&quot;))), 
                    q.paginate(q.match(q.index(index), q.casefold(data)))
                )
            )
            res_arr.extend(res[&quot;data&quot;])

        arr = []
        for x in res_arr:
            x[&quot;data&quot;][&quot;ref_id&quot;] = x[&quot;ref&quot;].id()
            arr.append(x[&quot;data&quot;])
        return arr
    except Exception as ex:
        raise ex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The lambda function will pass the data needed in the Index while paginate will search for the specific documents in the collection, then the map function will return all matching documents as a list.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def get_by_ref_id(collection, id):
    try:
        serverClient = FaunaClient(secret=os.environ.get(&quot;FAUNA_SERVER_SECRET&quot;))
        res = serverClient.query(q.get(q.ref(q.collection(collection), id)))
        res[&quot;data&quot;][&quot;ref_id&quot;] = res[&quot;ref&quot;].id()
        return res[&quot;data&quot;]
    except Exception as ex:
        raise ex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Get document by reference Id is the only function that does not use an Index rather would utilize the document’s reference Id.&lt;/p&gt;

&lt;p&gt;The code for creating, updating, and deleting documents would be similar. Because FaunaDB is a NoSQL database the data structure doesn’t matter as long as it is passed as a dictionary. Updating and deleting documents would also need an extra reference Id parameter, similar to the Get document by reference Id function.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def create(collection, data):
    try:
        serverClient = FaunaClient(secret=os.environ.get(&quot;FAUNA_SERVER_SECRET&quot;))
        res = serverClient.query(q.create(q.collection(collection), {&quot;data&quot;: data}))
        res[&quot;data&quot;][&quot;ref_id&quot;] = res[&quot;ref&quot;].id()
        return res[&quot;data&quot;]
    except Exception as ex:
        raise ex

def update(collection, id, data):
    try:
        serverClient = FaunaClient(secret=os.environ.get(&quot;FAUNA_SERVER_SECRET&quot;))
        res = serverClient.query(q.update(q.ref(q.collection(collection), id), {&quot;data&quot;: data}))
        res[&quot;data&quot;][&quot;ref_id&quot;] = res[&quot;ref&quot;].id()
        return res[&quot;data&quot;]
    except Exception as ex:
        raise ex

def delete(collection, id):
    try:
        serverClient = FaunaClient(secret=os.environ.get(&quot;FAUNA_SERVER_SECRET&quot;))
        serverClient.query(q.delete(q.ref(q.collection(collection), id)))
        return True
    except Exception as ex:
        raise ex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;make-the-to-dohelper&quot;&gt;Make the To-Do helper&lt;/h4&gt;

&lt;p&gt;After writing the FaunaDB entity script, write the helper functions for the collection. The helper functions need to be small precise functions that do exactly one thing.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from entities.faunadb_entity import get, get_multiple, get_by_ref_id, create, update, delete

def get_all_todos():
    try:
        return get_multiple('all_todos')
    except Exception as ex:
        raise ex

def get_todo_by_ref_id(id):
    try:
        return get_by_ref_id('todo', id)
    except Exception as ex:
        raise ex

def create_todo(data):
    try:
        return create('todo', data)
    except Exception as ex:
        raise ex

def update_todo(id, data):
    try:
        return update('todo', id, data)
    except Exception as ex:
        raise ex

def delete_todo(id):
    try:
        return delete('todo', id)
    except Exception as ex:
        raise ex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;make-the-to-doservice&quot;&gt;Make the To-Do service&lt;/h4&gt;

&lt;p&gt;When all the helpers are ready, write the service file to be used as endpoints. All the requests are parsed at the service level, thus the helper level will only receive processed data.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from flask import request, jsonify
from helpers import todo_helper

def get_all_todos():
    try:
        print(todo_helper.get_all_todos())
        return jsonify(todo_helper.get_all_todos())
    except Exception as ex:
        raise ex

def get_todo_by_ref_id(id):
    try:
        return jsonify(todo_helper.get_todo_by_ref_id(id))
    except Exception as ex:
        raise ex

def create_todo():
    try:
        req_data = request.get_json()
        return jsonify(todo_helper.create_todo(req_data))
    except Exception as ex:
        raise ex

def update_todo(id):
    try:
        req_data = request.get_json()
        return jsonify(todo_helper.update_todo(id, req_data[&quot;data&quot;]))
    except Exception as ex:
        raise ex

def delete_todo(id):
    try:
        return jsonify(todo_helper.delete_todo(id))
    except Exception as ex:
        raise ex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;attach-the-routes-to-the-service-endpoints&quot;&gt;Attach the routes to the service endpoints&lt;/h4&gt;

&lt;p&gt;Finally, when the endpoints are set, add the endpoints to the app.py&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from services.todo_service import get_all_todos, get_todo_by_ref_id, create_todo, update_todo, delete_todo
from flask import Flask

app = Flask(__name__)
app.add_url_rule('/api/todos', methods=['GET'], view_func=get_all_todos)
app.add_url_rule('/api/todos', methods=['POST'], view_func=create_todo)
app.add_url_rule('/api/todos/&amp;lt;string:id&amp;gt;', methods=['GET'], view_func=get_todo_by_ref_id)
app.add_url_rule('/api/todos/&amp;lt;string:id&amp;gt;', methods=['PUT'], view_func=update_todo)
app.add_url_rule('/api/todos/&amp;lt;string:id&amp;gt;', methods=['DELETE'], view_func=delete_todo)

if __name__ == &quot;__main__&quot;:
    app.run(host='0.0.0.0')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’re done! Don’t forget to test the APIs with Postman before deployment.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; You can check out my Github repository for the project and try to run it yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/agustinustheo/flask-faunadb&quot; title=&quot;https://github.com/agustinustheo/flask-faunadb&quot;&gt;&lt;strong&gt;Boilerplate code for Flask and FaunaDB project&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, you have learned to make an API using Flask and FaunaDB.&lt;/p&gt;

&lt;p&gt;To recap we have made:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API endpoints using Flask.&lt;/li&gt;
  &lt;li&gt;Indexes in FaunaDB.&lt;/li&gt;
  &lt;li&gt;A simple entity helper for FaunaDB.&lt;/li&gt;
  &lt;li&gt;A readable boilerplate for future API projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You now have a quick boilerplate setup to use when you want to make a quick app in a matter of hours. Future plans include adding a Swagger implementation to the existing boilerplate.&lt;/p&gt;

&lt;p&gt;Hope this is a great start for you, have a nice day!&lt;/p&gt;</content><author><name>Agustinus Theodorus</name></author><category term="tech" /><summary type="html">With the rise of serverless technology, making web services only gets easier. Serverless apps change the old monolithic architecture of apps and promote more of a microservice solution to technical problems.</summary></entry><entry><title type="html">How To Deploy Your .NET Core App on an IIS Server</title><link href="https://agustinustheo.github.io/tech/2020/10/20/how-to-deploy-net-core-on-iis.html" rel="alternate" type="text/html" title="How To Deploy Your .NET Core App on an IIS Server" /><published>2020-10-20T20:51:54+07:00</published><updated>2020-10-20T20:51:54+07:00</updated><id>https://agustinustheo.github.io/tech/2020/10/20/how-to-deploy-net-core-on-iis</id><content type="html" xml:base="https://agustinustheo.github.io/tech/2020/10/20/how-to-deploy-net-core-on-iis.html">&lt;p&gt;When you work in an enterprise environment you can’t choose where you would want to publish your application, especially if you enter a very established company. There would be times that you have to publish in a Linux environment, but in this case publishing in a Windows environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*QkuSb8wVpC5wY7kj&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;configure-yournet-coreproject&quot;&gt;Configure your .NET Core project&lt;/h3&gt;

&lt;p&gt;When trying to deploy on an IIS Server, make sure you already configure your Startup.cs and Program.cs accordingly. On the &lt;strong&gt;Startup.cs&lt;/strong&gt; you should add this config:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*WH3WzOX03-rPBePK&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;strong&gt;Program.cs&lt;/strong&gt; add this config:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*7ndyVaQEnF108l4V&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;configure-your-iisserver&quot;&gt;Configure your IIS Server&lt;/h3&gt;

&lt;h4 id=&quot;downloading-the-requiredpackages&quot;&gt;Downloading the required packages&lt;/h4&gt;

&lt;p&gt;Install the required packages before configuration.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/download/details.aspx?id=52685&quot;&gt;Microsoft Visual C++ 2015 Redistributable Update 3.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.microsoft.com/help/2533623/microsoft-security-advisory-insecure-library-loading-could-allow-remot&quot;&gt;Windows Server Patch KB2533623.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;downloading-the-dotnetsdk&quot;&gt;Downloading the dotnet SDK&lt;/h4&gt;

&lt;p&gt;Deployments only need runtime, but if you want to have a more flexible environment that allows you to build and publish &lt;strong&gt;dll&lt;/strong&gt; files rather than only running it you would want to install the latest dotnet SDK, &lt;a href=&quot;https://dotnet.microsoft.com/download/dotnet-core&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;install-the-azure-artifacts-credential-provider&quot;&gt;Install the Azure Artifacts Credential Provider&lt;/h4&gt;

&lt;p&gt;Next, install the Azure Artifacts Credential Provider, full instructions can be seen &lt;a href=&quot;https://github.com/Microsoft/artifacts-credprovider&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;azure-artifacts-credential-provider-manual-installation-guide&quot;&gt;Azure Artifacts Credential Provider Manual Installation Guide&lt;/h4&gt;

&lt;p&gt;Find the latest release &lt;a href=&quot;https://github.com/Microsoft/artifacts-credprovider/releases&quot;&gt;here&lt;/a&gt;, and download the .zip package.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*tlJiw8J58KyBZk1D&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After downloading the zip archive, copy the plugins folder to &lt;strong&gt;%USERPROFILE%/.nuget&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*DNrZNycYxJ7EmmAK&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set your environment variables, open &lt;strong&gt;User Variables&lt;/strong&gt; and create a new entry.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*jPaoP30GSXaE-mvK&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set the variable name to &lt;strong&gt;NUGET_PLUGIN_PATHS&lt;/strong&gt;, and because in this case, we are going to be using the dotnet credential provider, so set the value to&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;%USERPROFILE%\.nuget\plugins\netcore\CredentialProvider.Microsoft\CredentialProvider.Microsoft.dll&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*1IbSM3kmog2-9kWl&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then finish the setup by clicking &lt;strong&gt;OK&lt;/strong&gt; on the &lt;strong&gt;Environment Variables&lt;/strong&gt; dialog.&lt;/p&gt;

&lt;h3 id=&quot;publish-yournet-core-application&quot;&gt;Publish your .NET Core application&lt;/h3&gt;

&lt;h4 id=&quot;pull-the-project-fromdevops&quot;&gt;Pull the project from DevOps&lt;/h4&gt;

&lt;p&gt;Get into the directory where you want to put the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*JdLjczILQMnVA9QutYSYog.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Get inside the newly formed folder and run the dotnet publish command. Further info regarding the commands can be seen &lt;a href=&quot;https://docs.google.com/document/d/14YRTCJ8XO7yumjwmwyN67ZrEpc4LDrbg6UXlGC4noI0/edit#heading=h.eyphkxwv1b7&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*bVpZ052xiPvEIl34UfVtfg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If an authorization prompt to &lt;a href=&quot;https://microsoft.com/devicelogin&quot;&gt;https://microsoft.com/devicelogin&lt;/a&gt; pops up, login using the &lt;a href=&quot;https://azure.microsoft.com/en-us/services/devops/&quot;&gt;Azure DevOps&lt;/a&gt; account and enter the code shown in the window.&lt;/p&gt;

&lt;p&gt;Otherwise, it should show a successful build like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*9x3fssWVV25Ks0JUIHOaWw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, &lt;strong&gt;D:\deploy\api.test\bin\Release\netcoreapp3.1\publish&lt;/strong&gt; is the &lt;strong&gt;&lt;em&gt;physical path&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This will be the path used when configuring your app on an IIS application.&lt;/p&gt;

&lt;h3 id=&quot;run-yournet-core-oniis&quot;&gt;Run your .NET Core on IIS&lt;/h3&gt;

&lt;h4 id=&quot;add-the-application-pool&quot;&gt;Add the application pool&lt;/h4&gt;

&lt;p&gt;Right-click on the &lt;strong&gt;Application Pools&lt;/strong&gt; option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*Ntuy9f755WVik0zY&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Choose the &lt;strong&gt;Add Application Pool&lt;/strong&gt; option&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*KW3cmVX3rTQ7Lwjs&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Name your application pool and set the .NET CLR version to &lt;strong&gt;No Managed Code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*yZqj4kWhU7wpVDp1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;add-the-iis-website-optional&quot;&gt;Add the IIS website (Optional)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;This configuration is optional as you can use a pre-existing site.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Right-click on the &lt;strong&gt;Site&lt;/strong&gt; option&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*fOXUHP0QgMyt-NXO&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Add Website&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*ZFzoqMNSIj7Mmwb5&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set the &lt;strong&gt;Site name&lt;/strong&gt; and the physical path to the .NET Core build.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*IHxAaO_VohU2op1x&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Connect as…&lt;/strong&gt; button, to connect as a specific user. Set your user credentials and click &lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*hqYDTod9W9vsmTgM&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Test Settings&lt;/strong&gt; and it should show a pop up like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*6zwI7X_4N98nhBPn&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then on the &lt;strong&gt;Add Website&lt;/strong&gt; dialog click &lt;strong&gt;OK&lt;/strong&gt; to finish the setup.&lt;/p&gt;

&lt;h4 id=&quot;add-the-application-on-the-iiswebsite&quot;&gt;Add the Application on the IIS website&lt;/h4&gt;

&lt;p&gt;On the site’s homepage, click on the &lt;strong&gt;View Applications&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*xZT4AhnRwDe3-EjL&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Add Application&lt;/strong&gt; action&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*dInCu25X3VsVexlZ&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set your alias, this will be the path on the Url. Then, set the physical path to the .NET Core build.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*n0yJiu4l94muBAXB&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, select the application pool you previously made, then click &lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*RWYhIfs7zUhkEePs&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Connect as…&lt;/strong&gt; button. Set your user credentials and click &lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*60abQOP6lDndEYGS&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Test Settings&lt;/strong&gt; and it should show a pop up like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*yDHFWEiPupCSrfsL&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then on the &lt;strong&gt;Add Application&lt;/strong&gt; dialog click &lt;strong&gt;OK&lt;/strong&gt; to finish the setup.&lt;/p&gt;

&lt;p&gt;When all steps are done, your application should be running. Test this by opening a browser and put &lt;strong&gt;localhost/*your application alias*&lt;/strong&gt; in the search bar.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this tutorial, you have learned how to serve a .NET Core application using IIS.&lt;/p&gt;

&lt;p&gt;To recap what we have done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We have configured our .NET Core web app before deploying it on IIS.&lt;/li&gt;
  &lt;li&gt;We have installed the prerequisites for the IIS server.&lt;/li&gt;
  &lt;li&gt;We installed the required dotnet SDKs and the corresponding Azure authentication providers.&lt;/li&gt;
  &lt;li&gt;We have configured IIS to deploy our .NET Core app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You now have an open playbook to use when you want to deploy dotnet applications on IIS. Hope this tutorial was of help and have a nice day!&lt;/p&gt;</content><author><name>Agustinus Theodorus</name></author><category term="tech" /><summary type="html">When you work in an enterprise environment you can’t choose where you would want to publish your application, especially if you enter a very established company. There would be times that you have to publish in a Linux environment, but in this case publishing in a Windows environment.</summary></entry><entry><title type="html">4 Key Habits I Learned as a Software Engineer</title><link href="https://agustinustheo.github.io/tech/2020/10/12/4-key-habits-i-learned-as-a-software-engineer.html" rel="alternate" type="text/html" title="4 Key Habits I Learned as a Software Engineer" /><published>2020-10-12T23:15:31+07:00</published><updated>2020-10-12T23:15:31+07:00</updated><id>https://agustinustheo.github.io/tech/2020/10/12/4-key-habits-i-learned-as-a-software-engineer</id><content type="html" xml:base="https://agustinustheo.github.io/tech/2020/10/12/4-key-habits-i-learned-as-a-software-engineer.html">&lt;p&gt;I am almost 3 years into software engineering. Honestly, I don’t think I am &lt;strong&gt;that&lt;/strong&gt; good at it yet (I don’t know if I’ll ever be). But there are times when I wished that I knew somethings sooner than later. I thought it would be fun for me to reflect on those subjects and try to convey them to you as best as I can in this article. So here are the 4 key habits I learned as a software engineer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*u18ToVTMMZ8AN1M4fur0xw.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-write-clean-code-obviously&quot;&gt;1. Write Clean Code (Obviously!)&lt;/h3&gt;

&lt;p&gt;Bear with me here.&lt;/p&gt;

&lt;p&gt;So I haven’t always been the cleanest coder in the team. Through my struggles, I always find it annoying that people don’t understand what I wrote. Heck, I am annoyed that I can’t understand what I wrote a month ago.&lt;/p&gt;

&lt;p&gt;I thought, “Hey, why don’t I try to write &lt;em&gt;cleaner&lt;/em&gt;?”. Well, sometimes cleaner code doesn’t always mean someone else will understand what the code means at first glance. Because there are other factors at play like the business process, etc. But it helps — &lt;em&gt;I guess.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;dont-repeat-yourselfdry&quot;&gt;Don’t Repeat Yourself (DRY)&lt;/h4&gt;

&lt;p&gt;Let me tell you, no one annoys me more than &lt;em&gt;myself.&lt;/em&gt; I honestly can’t explain how frustrated I am when I read old code that has multiple copies.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Trying to understand multiple copies of the same lines of code at different points in the documentation is &lt;strong&gt;really confusing&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So ever since I realized that I tried to write functions for code that I would be reusing often. &lt;em&gt;Boy did that save a lot of headaches&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you don’t do that you might have to change multiple documents that literally have the same line of code just to let’s say — add a new condition to an if-else statement. Take it from me, sometimes you can forget and bugs will happen. So please, write code you going to reuse in a function.&lt;/p&gt;

&lt;p&gt;Speaking of functions…&lt;/p&gt;

&lt;h4 id=&quot;code-purposeful-functions&quot;&gt;Code Purposeful Functions&lt;/h4&gt;

&lt;p&gt;What I meant by &lt;strong&gt;purposeful&lt;/strong&gt; is that you have to write functions that have one exact purpose. For example, I want to hash passwords so I would obviously write a function specifically to hash passwords.&lt;/p&gt;

&lt;p&gt;This will add even more readability to your code and it will save you a lot of headaches when you need to say — change the hashing algorithms &lt;em&gt;or whatever&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But don’t go too overboard, if you feel that you don’t need to write a function for that &lt;strong&gt;.ToString()&lt;/strong&gt; method in C# than don’t. It’s already readable. Don’t overdo it.&lt;/p&gt;

&lt;h3 id=&quot;2-learn-designpatterns&quot;&gt;2. Learn Design Patterns&lt;/h3&gt;

&lt;p&gt;Like writing clean code wasn’t enough! Well, to be frank, it isn’t. I have tried to maintain and develop a lot of software in the 3 years I have been a software engineer, and sometimes I would say the default design pattern doesn’t do me any good.&lt;/p&gt;

&lt;p&gt;That’s why sometimes micro web frameworks like Flask are my favorites. I can go full creative in how I want my project to be, either by using repository patterns or otherwise.&lt;/p&gt;

&lt;p&gt;Find the best fit for you, try to catch up using materials &lt;a href=&quot;https://refactoring.guru/design-patterns&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;3-automatetasks&quot;&gt;3. Automate Tasks&lt;/h3&gt;

&lt;p&gt;If possible, you should automate everything. Automation might be the best thing I have ever done in my entire career. One time I wrote an application to write APIs for me, so I wouldn’t have to write code anymore.&lt;/p&gt;

&lt;p&gt;Well to be fair, it was templated so I still have to code if the app isn’t a simple CRUD application, but it was a good start. This “code generator” coincides with the second point of learning design patterns. I would not have been able to make it if I didn’t implement a design pattern that was comfortable for me.&lt;/p&gt;

&lt;p&gt;Another idea would be if your office has a ticketing system of some kind automating those to be added to your Agile boards might be a good idea. Well, it depends, but it is possible.&lt;/p&gt;

&lt;p&gt;Other things you might want to automate probably would be menial tasks such as server monitoring and app deployments.&lt;/p&gt;

&lt;h3 id=&quot;4-be-as-passionate-about-writing-ascoding&quot;&gt;4. Be as Passionate About Writing as Coding&lt;/h3&gt;

&lt;p&gt;Let me explain, probably your job as a software engineer does not always involve code. Sometimes it will involve writing.&lt;/p&gt;

&lt;p&gt;Maybe some companies have KPIs for writing on their engineering blog on Medium. But usually, the writing you would be doing involves documentation.&lt;/p&gt;

&lt;p&gt;It is kind of related to coding but rather than writing code, you are writing &lt;strong&gt;about&lt;/strong&gt; your code. In my personal experience, I would try to write the best documentation I can in the limited amount of time I would give myself. It helped tremendously when I had to handover projects to other teams.&lt;/p&gt;

&lt;p&gt;For me, I write good documentation for myself, because I don’t want to be bothered by other people.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Good documentation means fewer people asking for your help to understand your code. Which means more time for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Keep that in mind the next time your boss asks you to document your code.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Write clean code, try to implement the Don’t Repeat Yourself (DRY) mindset to your code. Write purposeful functions that are easy to read. Learn design patterns, find a pattern that you personally like. Also if possible try to automate your tasks. Finally, never be a lazy documentation writer. It can save you more time than you think.&lt;/p&gt;

&lt;p&gt;In the end, we all have our own variety of lessons learned. These 4 are just mine. I am writing this not to persuade you rather share with you my personal opinions. Anyway, I hope you have a nice day!&lt;/p&gt;</content><author><name>Agustinus Theodorus</name></author><category term="tech" /><summary type="html">I am almost 3 years into software engineering. Honestly, I don’t think I am that good at it yet (I don’t know if I’ll ever be). But there are times when I wished that I knew somethings sooner than later. I thought it would be fun for me to reflect on those subjects and try to convey them to you as best as I can in this article. So here are the 4 key habits I learned as a software engineer.</summary></entry></feed>